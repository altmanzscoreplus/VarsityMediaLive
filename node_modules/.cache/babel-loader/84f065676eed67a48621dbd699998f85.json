{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport objFromArray from '../utils/objFromArray';\nimport { chatApi } from '../__fakeApi__/chatApi';\nconst initialState = {\n  activeThreadId: null,\n  contacts: {\n    byId: {},\n    allIds: []\n  },\n  threads: {\n    byId: {},\n    allIds: []\n  },\n  participants: [],\n  recipients: []\n};\nconst slice = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    getContacts(state, action) {\n      const contacts = action.payload;\n      state.contacts.byId = objFromArray(contacts);\n      state.contacts.allIds = Object.keys(state.contacts.byId);\n    },\n\n    getThreads(state, action) {\n      const threads = action.payload;\n      state.threads.byId = objFromArray(threads);\n      state.threads.allIds = Object.keys(state.threads.byId);\n    },\n\n    getThread(state, action) {\n      const thread = action.payload;\n\n      if (thread) {\n        state.threads.byId[thread.id] = thread;\n\n        if (!state.threads.allIds.includes(thread.id)) {\n          state.threads.allIds.push(thread.id);\n        }\n\n        state.activeThreadId = thread.id;\n      } else {\n        state.activeThreadId = null;\n      }\n    },\n\n    markThreadAsSeen(state, action) {\n      const threadId = action.payload;\n      const thread = state.threads.byId[threadId];\n\n      if (thread) {\n        thread.unreadCount = 0;\n      }\n    },\n\n    resetActiveThread(state) {\n      state.activeThreadId = null;\n    },\n\n    getParticipants(state, action) {\n      state.participants = action.payload;\n    },\n\n    addRecipient(state, action) {\n      const recipient = action.payload;\n      const exists = state.recipients.find(_recipient => _recipient.id === recipient.id);\n\n      if (!exists) {\n        state.recipients.push(recipient);\n      }\n    },\n\n    removeRecipient(state, action) {\n      const recipientId = action.payload;\n      state.recipients = state.recipients.filter(recipient => recipient.id !== recipientId);\n    }\n\n  }\n});\nexport const {\n  reducer\n} = slice;\nexport const getContacts = () => async dispatch => {\n  const data = await chatApi.getContacts();\n  dispatch(slice.actions.getContacts(data));\n};\nexport const getThreads = () => async dispatch => {\n  const data = await chatApi.getThreads();\n  dispatch(slice.actions.getThreads(data));\n};\nexport const getThread = threadKey => async dispatch => {\n  const data = await chatApi.getThread(threadKey);\n  dispatch(slice.actions.getThread(data));\n};\nexport const markThreadAsSeen = threadId => async dispatch => {\n  await chatApi.markThreadAsSeen(threadId);\n  dispatch(slice.actions.markThreadAsSeen(threadId));\n};\nexport const resetActiveThread = () => dispatch => {\n  dispatch(slice.actions.resetActiveThread());\n};\nexport const getParticipants = threadKey => async dispatch => {\n  const data = await chatApi.getParticipants(threadKey);\n  dispatch(slice.actions.getParticipants(data));\n};\nexport const addRecipient = recipient => dispatch => {\n  dispatch(slice.actions.addRecipient(recipient));\n};\nexport const removeRecipient = recipientId => dispatch => {\n  dispatch(slice.actions.removeRecipient(recipientId));\n};\nexport default slice;","map":{"version":3,"sources":["/home/ec2-user/environment/VarsityMediaLive07042021/src/slices/chat.js"],"names":["createSlice","objFromArray","chatApi","initialState","activeThreadId","contacts","byId","allIds","threads","participants","recipients","slice","name","reducers","getContacts","state","action","payload","Object","keys","getThreads","getThread","thread","id","includes","push","markThreadAsSeen","threadId","unreadCount","resetActiveThread","getParticipants","addRecipient","recipient","exists","find","_recipient","removeRecipient","recipientId","filter","reducer","dispatch","data","actions","threadKey"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport objFromArray from '../utils/objFromArray';\nimport { chatApi } from '../__fakeApi__/chatApi';\n\nconst initialState = {\n  activeThreadId: null,\n  contacts: {\n    byId: {},\n    allIds: []\n  },\n  threads: {\n    byId: {},\n    allIds: []\n  },\n  participants: [],\n  recipients: []\n};\n\nconst slice = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    getContacts(state, action) {\n      const contacts = action.payload;\n\n      state.contacts.byId = objFromArray(contacts);\n      state.contacts.allIds = Object.keys(state.contacts.byId);\n    },\n    getThreads(state, action) {\n      const threads = action.payload;\n\n      state.threads.byId = objFromArray(threads);\n      state.threads.allIds = Object.keys(state.threads.byId);\n    },\n    getThread(state, action) {\n      const thread = action.payload;\n\n      if (thread) {\n        state.threads.byId[thread.id] = thread;\n\n        if (!state.threads.allIds.includes(thread.id)) {\n          state.threads.allIds.push(thread.id);\n        }\n\n        state.activeThreadId = thread.id;\n      } else {\n        state.activeThreadId = null;\n      }\n    },\n    markThreadAsSeen(state, action) {\n      const threadId = action.payload;\n      const thread = state.threads.byId[threadId];\n\n      if (thread) {\n        thread.unreadCount = 0;\n      }\n    },\n    resetActiveThread(state) {\n      state.activeThreadId = null;\n    },\n    getParticipants(state, action) {\n      state.participants = action.payload;\n    },\n    addRecipient(state, action) {\n      const recipient = action.payload;\n      const exists = state.recipients.find((_recipient) => _recipient.id === recipient.id);\n\n      if (!exists) {\n        state.recipients.push(recipient);\n      }\n    },\n    removeRecipient(state, action) {\n      const recipientId = action.payload;\n\n      state.recipients = state.recipients.filter((recipient) => recipient.id !== recipientId);\n    }\n  }\n});\n\nexport const { reducer } = slice;\n\nexport const getContacts = () => async (dispatch) => {\n  const data = await chatApi.getContacts();\n\n  dispatch(slice.actions.getContacts(data));\n};\n\nexport const getThreads = () => async (dispatch) => {\n  const data = await chatApi.getThreads();\n\n  dispatch(slice.actions.getThreads(data));\n};\n\nexport const getThread = (threadKey) => async (dispatch) => {\n  const data = await chatApi.getThread(threadKey);\n\n  dispatch(slice.actions.getThread(data));\n};\n\nexport const markThreadAsSeen = (threadId) => async (dispatch) => {\n  await chatApi.markThreadAsSeen(threadId);\n\n  dispatch(slice.actions.markThreadAsSeen(threadId));\n};\n\nexport const resetActiveThread = () => (dispatch) => {\n  dispatch(slice.actions.resetActiveThread());\n};\n\nexport const getParticipants = (threadKey) => async (dispatch) => {\n  const data = await chatApi.getParticipants(threadKey);\n\n  dispatch(slice.actions.getParticipants(data));\n};\n\nexport const addRecipient = (recipient) => (dispatch) => {\n  dispatch(slice.actions.addRecipient(recipient));\n};\n\nexport const removeRecipient = (recipientId) => (dispatch) => {\n  dispatch(slice.actions.removeRecipient(recipientId));\n};\n\nexport default slice;\n"]},"metadata":{},"sourceType":"module"}