{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/environment/VarsityMediaLive07042021/src/components/dashboard/chat/ChatThreadList.js\",\n    _s = $RefreshSig$();\n\nimport { useNavigate } from 'react-router-dom';\nimport { List } from '@material-ui/core';\nimport { useSelector } from '../../../store';\nimport ChatThreadItem from './ChatThreadItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatThreadList = props => {\n  _s();\n\n  const {\n    threads,\n    activeThreadId\n  } = useSelector(state => state.chat);\n  const navigate = useNavigate();\n\n  const handleSelect = threadId => {\n    const thread = threads.byId[threadId];\n    let threadKey;\n\n    if (thread.type === 'GROUP') {\n      threadKey = thread.id;\n    } else {\n      // We hardcode the current user ID because the mocked that is not in sync\n      // with the auth provider.\n      // When implementing this app with a real database, replace this\n      // ID with the ID from Auth Context.\n      const otherParticipant = thread.participants.find(participant => participant.id !== '5e86809283e28b96d2d38537');\n      threadKey = otherParticipant.username;\n    }\n\n    navigate(`/dashboard/chat/${threadKey}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(List, { ...props,\n    children: threads.allIds.map(threadId => /*#__PURE__*/_jsxDEV(ChatThreadItem, {\n      active: activeThreadId === threadId,\n      onSelect: () => handleSelect(threadId),\n      thread: threads.byId[threadId]\n    }, threadId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatThreadList, \"47L1OvfqPkzRXeOg1FCONj4h00Q=\", false, function () {\n  return [useSelector, useNavigate];\n});\n\n_c = ChatThreadList;\nexport default ChatThreadList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatThreadList\");","map":{"version":3,"sources":["/home/ec2-user/environment/VarsityMediaLive07042021/src/components/dashboard/chat/ChatThreadList.js"],"names":["useNavigate","List","useSelector","ChatThreadItem","ChatThreadList","props","threads","activeThreadId","state","chat","navigate","handleSelect","threadId","thread","byId","threadKey","type","id","otherParticipant","participants","find","participant","username","allIds","map"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAAA;;AAChC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA8BL,WAAW,CAAEM,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAA/C;AACA,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;;AAEA,QAAMW,YAAY,GAAIC,QAAD,IAAc;AACjC,UAAMC,MAAM,GAAGP,OAAO,CAACQ,IAAR,CAAaF,QAAb,CAAf;AACA,QAAIG,SAAJ;;AAEA,QAAIF,MAAM,CAACG,IAAP,KAAgB,OAApB,EAA6B;AAC3BD,MAAAA,SAAS,GAAGF,MAAM,CAACI,EAAnB;AACD,KAFD,MAEO;AACL;AACA;AACA;AACA;AACA,YAAMC,gBAAgB,GAAGL,MAAM,CAACM,YAAP,CAAoBC,IAApB,CAA0BC,WAAD,IAAkBA,WAAW,CAACJ,EAAZ,KAC9D,0BADmB,CAAzB;AAGAF,MAAAA,SAAS,GAAGG,gBAAgB,CAACI,QAA7B;AACD;;AAEDZ,IAAAA,QAAQ,CAAE,mBAAkBK,SAAU,EAA9B,CAAR;AACD,GAlBD;;AAoBA,sBACE,QAAC,IAAD,OAAUV,KAAV;AAAA,cACGC,OAAO,CAACiB,MAAR,CAAeC,GAAf,CAAoBZ,QAAD,iBAClB,QAAC,cAAD;AACE,MAAA,MAAM,EAAEL,cAAc,KAAKK,QAD7B;AAGE,MAAA,QAAQ,EAAE,MAAMD,YAAY,CAACC,QAAD,CAH9B;AAIE,MAAA,MAAM,EAAEN,OAAO,CAACQ,IAAR,CAAaF,QAAb;AAJV,OAEOA,QAFP;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CApCD;;GAAMR,c;UACgCF,W,EACnBF,W;;;KAFbI,c;AAsCN,eAAeA,cAAf","sourcesContent":["import { useNavigate } from 'react-router-dom';\nimport { List } from '@material-ui/core';\nimport { useSelector } from '../../../store';\nimport ChatThreadItem from './ChatThreadItem';\n\nconst ChatThreadList = (props) => {\n  const { threads, activeThreadId } = useSelector((state) => state.chat);\n  const navigate = useNavigate();\n\n  const handleSelect = (threadId) => {\n    const thread = threads.byId[threadId];\n    let threadKey;\n\n    if (thread.type === 'GROUP') {\n      threadKey = thread.id;\n    } else {\n      // We hardcode the current user ID because the mocked that is not in sync\n      // with the auth provider.\n      // When implementing this app with a real database, replace this\n      // ID with the ID from Auth Context.\n      const otherParticipant = thread.participants.find((participant) => (participant.id\n        !== '5e86809283e28b96d2d38537'));\n\n      threadKey = otherParticipant.username;\n    }\n\n    navigate(`/dashboard/chat/${threadKey}`);\n  };\n\n  return (\n    <List {...props}>\n      {threads.allIds.map((threadId) => (\n        <ChatThreadItem\n          active={activeThreadId === threadId}\n          key={threadId}\n          onSelect={() => handleSelect(threadId)}\n          thread={threads.byId[threadId]}\n        />\n      ))}\n    </List>\n  );\n};\n\nexport default ChatThreadList;\n"]},"metadata":{},"sourceType":"module"}