{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { mailApi } from '../__fakeApi__/mailApi';\nimport objFromArray from '../utils/objFromArray';\nconst initialState = {\n  emails: {\n    byId: {},\n    allIds: []\n  },\n  labels: [],\n  isSidebarOpen: false,\n  isComposeOpen: false\n};\nconst slice = createSlice({\n  name: 'mail',\n  initialState,\n  reducers: {\n    getLabels(state, action) {\n      state.labels = action.payload;\n    },\n\n    getEmails(state, action) {\n      const emails = action.payload;\n      state.emails.byId = objFromArray(emails);\n      state.emails.allIds = Object.keys(state.emails.byId);\n    },\n\n    getEmail(state, action) {\n      const email = action.payload;\n      state.emails.byId[email.id] = email;\n\n      if (!state.emails.allIds.includes(email.id)) {\n        state.emails.allIds.push(email.id);\n      }\n    },\n\n    openSidebar(state) {\n      state.isSidebarOpen = true;\n    },\n\n    closeSidebar(state) {\n      state.isSidebarOpen = false;\n    },\n\n    openCompose(state) {\n      state.isComposeOpen = true;\n    },\n\n    closeCompose(state) {\n      state.isComposeOpen = false;\n    }\n\n  }\n});\nexport const {\n  reducer\n} = slice;\nexport const getLabels = () => async dispatch => {\n  const data = await mailApi.getLabels();\n  dispatch(slice.actions.getLabels(data));\n};\nexport const getEmails = ({\n  customLabel,\n  systemLabel\n}) => async dispatch => {\n  const data = await mailApi.getEmails({\n    customLabel,\n    systemLabel\n  });\n  dispatch(slice.actions.getEmails(data));\n};\nexport const getEmail = emailId => async dispatch => {\n  const data = await mailApi.getEmail(emailId);\n  dispatch(slice.actions.getEmail(data));\n};\nexport const openSidebar = () => async dispatch => {\n  dispatch(slice.actions.openSidebar());\n};\nexport const closeSidebar = () => async dispatch => {\n  dispatch(slice.actions.closeSidebar());\n};\nexport const openCompose = () => async dispatch => {\n  dispatch(slice.actions.openCompose());\n};\nexport const closeCompose = () => async dispatch => {\n  dispatch(slice.actions.closeCompose());\n};\nexport default slice;","map":{"version":3,"sources":["/home/ec2-user/environment/VarsityMediaLive07042021/src/slices/mail.js"],"names":["createSlice","mailApi","objFromArray","initialState","emails","byId","allIds","labels","isSidebarOpen","isComposeOpen","slice","name","reducers","getLabels","state","action","payload","getEmails","Object","keys","getEmail","email","id","includes","push","openSidebar","closeSidebar","openCompose","closeCompose","reducer","dispatch","data","actions","customLabel","systemLabel","emailId"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EAAE,EADA;AAENC,IAAAA,MAAM,EAAE;AAFF,GADW;AAKnBC,EAAAA,MAAM,EAAE,EALW;AAMnBC,EAAAA,aAAa,EAAE,KANI;AAOnBC,EAAAA,aAAa,EAAE;AAPI,CAArB;AAUA,MAAMC,KAAK,GAAGV,WAAW,CAAC;AACxBW,EAAAA,IAAI,EAAE,MADkB;AAExBR,EAAAA,YAFwB;AAGxBS,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACvBD,MAAAA,KAAK,CAACP,MAAN,GAAeQ,MAAM,CAACC,OAAtB;AACD,KAHO;;AAIRC,IAAAA,SAAS,CAACH,KAAD,EAAQC,MAAR,EAAgB;AACvB,YAAMX,MAAM,GAAGW,MAAM,CAACC,OAAtB;AAEAF,MAAAA,KAAK,CAACV,MAAN,CAAaC,IAAb,GAAoBH,YAAY,CAACE,MAAD,CAAhC;AACAU,MAAAA,KAAK,CAACV,MAAN,CAAaE,MAAb,GAAsBY,MAAM,CAACC,IAAP,CAAYL,KAAK,CAACV,MAAN,CAAaC,IAAzB,CAAtB;AACD,KATO;;AAURe,IAAAA,QAAQ,CAACN,KAAD,EAAQC,MAAR,EAAgB;AACtB,YAAMM,KAAK,GAAGN,MAAM,CAACC,OAArB;AAEAF,MAAAA,KAAK,CAACV,MAAN,CAAaC,IAAb,CAAkBgB,KAAK,CAACC,EAAxB,IAA8BD,KAA9B;;AAEA,UAAI,CAACP,KAAK,CAACV,MAAN,CAAaE,MAAb,CAAoBiB,QAApB,CAA6BF,KAAK,CAACC,EAAnC,CAAL,EAA6C;AAC3CR,QAAAA,KAAK,CAACV,MAAN,CAAaE,MAAb,CAAoBkB,IAApB,CAAyBH,KAAK,CAACC,EAA/B;AACD;AACF,KAlBO;;AAmBRG,IAAAA,WAAW,CAACX,KAAD,EAAQ;AACjBA,MAAAA,KAAK,CAACN,aAAN,GAAsB,IAAtB;AACD,KArBO;;AAsBRkB,IAAAA,YAAY,CAACZ,KAAD,EAAQ;AAClBA,MAAAA,KAAK,CAACN,aAAN,GAAsB,KAAtB;AACD,KAxBO;;AAyBRmB,IAAAA,WAAW,CAACb,KAAD,EAAQ;AACjBA,MAAAA,KAAK,CAACL,aAAN,GAAsB,IAAtB;AACD,KA3BO;;AA4BRmB,IAAAA,YAAY,CAACd,KAAD,EAAQ;AAClBA,MAAAA,KAAK,CAACL,aAAN,GAAsB,KAAtB;AACD;;AA9BO;AAHc,CAAD,CAAzB;AAqCA,OAAO,MAAM;AAAEoB,EAAAA;AAAF,IAAcnB,KAApB;AAEP,OAAO,MAAMG,SAAS,GAAG,MAAM,MAAOiB,QAAP,IAAoB;AACjD,QAAMC,IAAI,GAAG,MAAM9B,OAAO,CAACY,SAAR,EAAnB;AAEAiB,EAAAA,QAAQ,CAACpB,KAAK,CAACsB,OAAN,CAAcnB,SAAd,CAAwBkB,IAAxB,CAAD,CAAR;AACD,CAJM;AAMP,OAAO,MAAMd,SAAS,GAAG,CAAC;AAAEgB,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAD,KAAkC,MAAOJ,QAAP,IAAoB;AAC7E,QAAMC,IAAI,GAAG,MAAM9B,OAAO,CAACgB,SAAR,CAAkB;AAAEgB,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAAlB,CAAnB;AAEAJ,EAAAA,QAAQ,CAACpB,KAAK,CAACsB,OAAN,CAAcf,SAAd,CAAwBc,IAAxB,CAAD,CAAR;AACD,CAJM;AAMP,OAAO,MAAMX,QAAQ,GAAIe,OAAD,IAAa,MAAOL,QAAP,IAAoB;AACvD,QAAMC,IAAI,GAAG,MAAM9B,OAAO,CAACmB,QAAR,CAAiBe,OAAjB,CAAnB;AAEAL,EAAAA,QAAQ,CAACpB,KAAK,CAACsB,OAAN,CAAcZ,QAAd,CAAuBW,IAAvB,CAAD,CAAR;AACD,CAJM;AAMP,OAAO,MAAMN,WAAW,GAAG,MAAM,MAAOK,QAAP,IAAoB;AACnDA,EAAAA,QAAQ,CAACpB,KAAK,CAACsB,OAAN,CAAcP,WAAd,EAAD,CAAR;AACD,CAFM;AAIP,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAOI,QAAP,IAAoB;AACpDA,EAAAA,QAAQ,CAACpB,KAAK,CAACsB,OAAN,CAAcN,YAAd,EAAD,CAAR;AACD,CAFM;AAIP,OAAO,MAAMC,WAAW,GAAG,MAAM,MAAOG,QAAP,IAAoB;AACnDA,EAAAA,QAAQ,CAACpB,KAAK,CAACsB,OAAN,CAAcL,WAAd,EAAD,CAAR;AACD,CAFM;AAIP,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAOE,QAAP,IAAoB;AACpDA,EAAAA,QAAQ,CAACpB,KAAK,CAACsB,OAAN,CAAcJ,YAAd,EAAD,CAAR;AACD,CAFM;AAIP,eAAelB,KAAf","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { mailApi } from '../__fakeApi__/mailApi';\nimport objFromArray from '../utils/objFromArray';\n\nconst initialState = {\n  emails: {\n    byId: {},\n    allIds: []\n  },\n  labels: [],\n  isSidebarOpen: false,\n  isComposeOpen: false\n};\n\nconst slice = createSlice({\n  name: 'mail',\n  initialState,\n  reducers: {\n    getLabels(state, action) {\n      state.labels = action.payload;\n    },\n    getEmails(state, action) {\n      const emails = action.payload;\n\n      state.emails.byId = objFromArray(emails);\n      state.emails.allIds = Object.keys(state.emails.byId);\n    },\n    getEmail(state, action) {\n      const email = action.payload;\n\n      state.emails.byId[email.id] = email;\n\n      if (!state.emails.allIds.includes(email.id)) {\n        state.emails.allIds.push(email.id);\n      }\n    },\n    openSidebar(state) {\n      state.isSidebarOpen = true;\n    },\n    closeSidebar(state) {\n      state.isSidebarOpen = false;\n    },\n    openCompose(state) {\n      state.isComposeOpen = true;\n    },\n    closeCompose(state) {\n      state.isComposeOpen = false;\n    }\n  }\n});\n\nexport const { reducer } = slice;\n\nexport const getLabels = () => async (dispatch) => {\n  const data = await mailApi.getLabels();\n\n  dispatch(slice.actions.getLabels(data));\n};\n\nexport const getEmails = ({ customLabel, systemLabel }) => async (dispatch) => {\n  const data = await mailApi.getEmails({ customLabel, systemLabel });\n\n  dispatch(slice.actions.getEmails(data));\n};\n\nexport const getEmail = (emailId) => async (dispatch) => {\n  const data = await mailApi.getEmail(emailId);\n\n  dispatch(slice.actions.getEmail(data));\n};\n\nexport const openSidebar = () => async (dispatch) => {\n  dispatch(slice.actions.openSidebar());\n};\n\nexport const closeSidebar = () => async (dispatch) => {\n  dispatch(slice.actions.closeSidebar());\n};\n\nexport const openCompose = () => async (dispatch) => {\n  dispatch(slice.actions.openCompose());\n};\n\nexport const closeCompose = () => async (dispatch) => {\n  dispatch(slice.actions.closeCompose());\n};\n\nexport default slice;\n"]},"metadata":{},"sourceType":"module"}