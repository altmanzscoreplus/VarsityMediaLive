{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/environment/VarsityMediaLive07042021/src/contexts/SettingsContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { THEMES } from '../constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialSettings = {\n  compact: true,\n  direction: 'ltr',\n  responsiveFontSizes: true,\n  roundedCorners: true,\n  theme: THEMES.LIGHT\n};\nexport const restoreSettings = () => {\n  let settings = null;\n\n  try {\n    const storedData = window.localStorage.getItem('settings');\n\n    if (storedData) {\n      settings = JSON.parse(storedData);\n    } else {\n      settings = {\n        compact: true,\n        direction: 'ltr',\n        responsiveFontSizes: true,\n        roundedCorners: true,\n        theme: THEMES.DARK\n      };\n    }\n  } catch (err) {\n    console.error(err); // If stored data is not a strigified JSON this will fail,\n    // that's why we catch the error\n  }\n\n  return settings;\n};\nexport const storeSettings = settings => {\n  window.localStorage.setItem('settings', JSON.stringify(settings));\n};\nconst SettingsContext = /*#__PURE__*/createContext({\n  settings: initialSettings,\n  saveSettings: () => {}\n});\nexport const SettingsProvider = props => {\n  _s();\n\n  const {\n    children\n  } = props;\n  const [settings, setSettings] = useState(initialSettings);\n  useEffect(() => {\n    const restoredSettings = restoreSettings();\n\n    if (restoredSettings) {\n      setSettings(restoredSettings);\n    }\n  }, []);\n\n  const saveSettings = updatedSettings => {\n    setSettings(updatedSettings);\n    storeSettings(updatedSettings);\n  };\n\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: {\n      settings,\n      saveSettings\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SettingsProvider, \"GEfCXRZSPlOPnD8aJCS6HZVx5YE=\");\n\n_c = SettingsProvider;\nSettingsProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport const SettingsConsumer = SettingsContext.Consumer;\nexport default SettingsContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"SettingsProvider\");","map":{"version":3,"sources":["/home/ec2-user/environment/VarsityMediaLive07042021/src/contexts/SettingsContext.js"],"names":["createContext","useEffect","useState","PropTypes","THEMES","initialSettings","compact","direction","responsiveFontSizes","roundedCorners","theme","LIGHT","restoreSettings","settings","storedData","window","localStorage","getItem","JSON","parse","DARK","err","console","error","storeSettings","setItem","stringify","SettingsContext","saveSettings","SettingsProvider","props","children","setSettings","restoredSettings","updatedSettings","propTypes","node","isRequired","SettingsConsumer","Consumer"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,QAAuB,cAAvB;;AAEA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,OAAO,EAAE,IADa;AAEtBC,EAAAA,SAAS,EAAE,KAFW;AAGtBC,EAAAA,mBAAmB,EAAE,IAHC;AAItBC,EAAAA,cAAc,EAAE,IAJM;AAKtBC,EAAAA,KAAK,EAAEN,MAAM,CAACO;AALQ,CAAxB;AAQA,OAAO,MAAMC,eAAe,GAAG,MAAM;AACnC,MAAIC,QAAQ,GAAG,IAAf;;AAEA,MAAI;AACF,UAAMC,UAAU,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,CAAnB;;AAEA,QAAIH,UAAJ,EAAgB;AACdD,MAAAA,QAAQ,GAAGK,IAAI,CAACC,KAAL,CAAWL,UAAX,CAAX;AACD,KAFD,MAEO;AACLD,MAAAA,QAAQ,GAAG;AACTP,QAAAA,OAAO,EAAE,IADA;AAETC,QAAAA,SAAS,EAAE,KAFF;AAGTC,QAAAA,mBAAmB,EAAE,IAHZ;AAITC,QAAAA,cAAc,EAAE,IAJP;AAKTC,QAAAA,KAAK,EAAEN,MAAM,CAACgB;AALL,OAAX;AAOD;AACF,GAdD,CAcE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd,EADY,CAEZ;AACA;AACD;;AAED,SAAOR,QAAP;AACD,CAxBM;AA0BP,OAAO,MAAMW,aAAa,GAAIX,QAAD,IAAc;AACzCE,EAAAA,MAAM,CAACC,YAAP,CAAoBS,OAApB,CAA4B,UAA5B,EAAwCP,IAAI,CAACQ,SAAL,CAAeb,QAAf,CAAxC;AACD,CAFM;AAIP,MAAMc,eAAe,gBAAG3B,aAAa,CAAC;AACpCa,EAAAA,QAAQ,EAAER,eAD0B;AAEpCuB,EAAAA,YAAY,EAAE,MAAM,CAAG;AAFa,CAAD,CAArC;AAKA,OAAO,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAAA;;AACzC,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB;AACA,QAAM,CAACjB,QAAD,EAAWmB,WAAX,IAA0B9B,QAAQ,CAACG,eAAD,CAAxC;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgC,gBAAgB,GAAGrB,eAAe,EAAxC;;AAEA,QAAIqB,gBAAJ,EAAsB;AACpBD,MAAAA,WAAW,CAACC,gBAAD,CAAX;AACD;AACF,GANQ,EAMN,EANM,CAAT;;AAQA,QAAML,YAAY,GAAIM,eAAD,IAAqB;AACxCF,IAAAA,WAAW,CAACE,eAAD,CAAX;AACAV,IAAAA,aAAa,CAACU,eAAD,CAAb;AACD,GAHD;;AAKA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AACE,IAAA,KAAK,EAAE;AACLrB,MAAAA,QADK;AAELe,MAAAA;AAFK,KADT;AAAA,cAMGG;AANH;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA3BM;;GAAMF,gB;;KAAAA,gB;AA6BbA,gBAAgB,CAACM,SAAjB,GAA6B;AAC3BJ,EAAAA,QAAQ,EAAE5B,SAAS,CAACiC,IAAV,CAAeC;AADE,CAA7B;AAIA,OAAO,MAAMC,gBAAgB,GAAGX,eAAe,CAACY,QAAzC;AAEP,eAAeZ,eAAf","sourcesContent":["import { createContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { THEMES } from '../constants';\n\nconst initialSettings = {\n  compact: true,\n  direction: 'ltr',\n  responsiveFontSizes: true,\n  roundedCorners: true,\n  theme: THEMES.LIGHT\n};\n\nexport const restoreSettings = () => {\n  let settings = null;\n\n  try {\n    const storedData = window.localStorage.getItem('settings');\n\n    if (storedData) {\n      settings = JSON.parse(storedData);\n    } else {\n      settings = {\n        compact: true,\n        direction: 'ltr',\n        responsiveFontSizes: true,\n        roundedCorners: true,\n        theme: THEMES.DARK\n      };\n    }\n  } catch (err) {\n    console.error(err);\n    // If stored data is not a strigified JSON this will fail,\n    // that's why we catch the error\n  }\n\n  return settings;\n};\n\nexport const storeSettings = (settings) => {\n  window.localStorage.setItem('settings', JSON.stringify(settings));\n};\n\nconst SettingsContext = createContext({\n  settings: initialSettings,\n  saveSettings: () => { }\n});\n\nexport const SettingsProvider = (props) => {\n  const { children } = props;\n  const [settings, setSettings] = useState(initialSettings);\n\n  useEffect(() => {\n    const restoredSettings = restoreSettings();\n\n    if (restoredSettings) {\n      setSettings(restoredSettings);\n    }\n  }, []);\n\n  const saveSettings = (updatedSettings) => {\n    setSettings(updatedSettings);\n    storeSettings(updatedSettings);\n  };\n\n  return (\n    <SettingsContext.Provider\n      value={{\n        settings,\n        saveSettings\n      }}\n    >\n      {children}\n    </SettingsContext.Provider>\n  );\n};\n\nSettingsProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport const SettingsConsumer = SettingsContext.Consumer;\n\nexport default SettingsContext;\n"]},"metadata":{},"sourceType":"module"}