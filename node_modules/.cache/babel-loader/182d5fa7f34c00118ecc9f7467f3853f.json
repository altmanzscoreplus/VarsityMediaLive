{"ast":null,"code":"import { subDays, subHours, subMinutes } from 'date-fns';\nimport createResourceId from '../utils/createResourceId';\nimport deepCopy from '../utils/deepCopy';\nconst now = new Date();\nconst contacts = [{\n  id: '5e8891ab188cd2855e6029b7',\n  avatar: '/static/mock-images/avatars/avatar-alcides_antonio.png',\n  isActive: true,\n  lastActivity: now.getTime(),\n  name: 'Alcides Antonio',\n  username: 'alcides.antonio'\n}, {\n  id: '5e887a62195cc5aef7e8ca5d',\n  avatar: '/static/mock-images/avatars/avatar-marcus_finn.png',\n  isActive: false,\n  lastActivity: subHours(now, 2).getTime(),\n  name: 'Marcus Finn',\n  username: 'marcus.finn'\n}, {\n  id: '5e887ac47eed253091be10cb',\n  avatar: '/static/mock-images/avatars/avatar-carson_darrin.png',\n  isActive: false,\n  lastActivity: subMinutes(now, 15).getTime(),\n  name: 'Carson Darrin',\n  username: 'carson.darrin'\n}, {\n  id: '5e887b209c28ac3dd97f6db5',\n  avatar: '/static/mock-images/avatars/avatar-fran_perez.png',\n  isActive: true,\n  lastActivity: now.getTime(),\n  name: 'Fran Perez',\n  username: 'fran.perez'\n}, {\n  id: '5e887b7602bdbc4dbb234b27',\n  avatar: '/static/mock-images/avatars/avatar-jie_yan_song.png',\n  isActive: true,\n  lastActivity: now.getTime(),\n  name: 'Jie Yan Song',\n  username: 'jie.yan.song'\n}, {\n  id: '5e86805e2bafd54f66cc95c3',\n  avatar: '/static/mock-images/avatars/avatar-miron_vitold.png',\n  isActive: false,\n  lastActivity: subDays(now, 2).getTime(),\n  name: 'Miron Vitold',\n  username: 'miron.vitold'\n}, {\n  id: '5e887a1fbefd7938eea9c981',\n  avatar: '/static/mock-images/avatars/avatar-penjani_inyene.png',\n  isActive: false,\n  lastActivity: subHours(now, 6).getTime(),\n  name: 'Penjani Inyene',\n  username: 'penjani.inyene'\n}, {\n  id: '5e887d0b3d090c1b8f162003',\n  avatar: '/static/mock-images/avatars/avatar-omar_darobe.png',\n  isActive: true,\n  lastActivity: now.getTime(),\n  name: 'Omar Darobe',\n  username: 'omar.darobe'\n}, {\n  id: '5e88792be2d4cfb4bf0971d9',\n  avatar: '/static/mock-images/avatars/avatar-siegbert_gottfried.png',\n  isActive: true,\n  lastActivity: now.getTime(),\n  name: 'Siegbert Gottfried',\n  username: 'siegbert.gottfried'\n}, {\n  id: '5e8877da9a65442b11551975',\n  avatar: '/static/mock-images/avatars/avatar-iulia_albu.png',\n  isActive: true,\n  lastActivity: now.getTime(),\n  name: 'Iulia Albu',\n  username: 'iulia.albu'\n}, {\n  id: '5e8680e60cba5019c5ca6fda',\n  avatar: '/static/mock-images/avatars/avatar-nasimiyu_danai.png',\n  isActive: true,\n  lastActivity: now.getTime(),\n  name: 'Nasimiyu Danai',\n  username: 'nasimiyu.danai'\n}];\nconst threads = [{\n  id: '5e867eb9de721aecaccf4f7b',\n  messages: [{\n    id: '5e867f0a5bc0ff2bfa07bfa6',\n    attachments: [],\n    body: 'Hey, nice projects! I really liked the one in react. What\\'s your quote on kinda similar project?',\n    contentType: 'text',\n    createdAt: subHours(now, 10).getTime(),\n    senderId: '5e86805e2bafd54f66cc95c3'\n  }, {\n    id: '5e867f167d5f78109ae9f2a4',\n    attachments: [],\n    body: 'I would need to know more details, but my hourly rate stats at $35/hour. Thanks!',\n    contentType: 'text',\n    createdAt: subHours(now, 2).getTime(),\n    senderId: '5e86809283e28b96d2d38537'\n  }, {\n    id: '5e867f1c9ca72084693528f4',\n    attachments: [],\n    body: 'Well it\\'s a really easy one, I\\'m sure we can make it half of the price.',\n    contentType: 'text',\n    createdAt: subMinutes(now, 5).getTime(),\n    senderId: '5e86805e2bafd54f66cc95c3'\n  }, {\n    id: '5e867f22fd2e27a09849b4db',\n    attachments: [],\n    body: 'Then why don\\'t you make it if it\\'s that easy? Sorry I\\'m not interetes, have fantastic day Adam!',\n    contentType: 'text',\n    createdAt: subMinutes(now, 3).getTime(),\n    senderId: '5e86809283e28b96d2d38537'\n  }, {\n    id: '5e867f28a34d45ac6eb5c41f',\n    attachments: [],\n    body: 'Last offer, $25 per hour',\n    contentType: 'text',\n    createdAt: subMinutes(now, 1).getTime(),\n    senderId: '5e86805e2bafd54f66cc95c3'\n  }, {\n    id: '5e867f2dba984a3f78b33526',\n    attachments: [],\n    body: '/static/mock-images/projects/project_4.png',\n    contentType: 'image',\n    createdAt: subMinutes(now, 1).getTime(),\n    senderId: '5e86805e2bafd54f66cc95c3'\n  }],\n  participants: [{\n    id: '5e86809283e28b96d2d38537',\n    avatar: '/static/mock-images/avatars/avatar-jane_rotanson.png',\n    name: 'Jane Rotanson',\n    username: 'jane.rotanson'\n  }, {\n    id: '5e86805e2bafd54f66cc95c3',\n    avatar: '/static/mock-images/avatars/avatar-miron_vitold.png',\n    name: 'Miron Vitold',\n    username: 'miron.vitold'\n  }],\n  type: 'ONE_TO_ONE',\n  unreadCount: 2\n}, {\n  id: '5e867fa7082c3c5921403a26',\n  messages: [{\n    id: '5e867fc180837d901bd9bca1',\n    attachments: [],\n    body: 'Hey, would you like to collaborate?',\n    contentType: 'text',\n    createdAt: subMinutes(now, 6).getTime(),\n    senderId: '5e8680e60cba5019c5ca6fda'\n  }, {\n    id: '5e8d6fb695df7971237fc173',\n    attachments: [],\n    body: 'Hi, Merrile!',\n    contentType: 'text',\n    createdAt: subMinutes(now, 5).getTime(),\n    senderId: '5e86809283e28b96d2d38537'\n  }, {\n    id: '58825a290eb4d4271a54f188',\n    attachments: [],\n    body: 'Hello everyone ğŸ˜€',\n    contentType: 'text',\n    createdAt: subMinutes(now, 2).getTime(),\n    senderId: '5e8891ab188cd2855e6029b7'\n  }],\n  participants: [{\n    id: '5e86809283e28b96d2d38537',\n    avatar: '/static/mock-images/avatars/avatar-jane_rotanson.png',\n    name: 'Jane Rotanson',\n    username: 'jane.rotanson'\n  }, {\n    id: '5e8680e60cba5019c5ca6fda',\n    avatar: '/static/mock-images/avatars/avatar-nasimiyu_danai.png',\n    name: 'Nasimiyu Danai',\n    username: 'nasimiyu.danai'\n  }, {\n    id: '5e8891ab188cd2855e6029b7',\n    avatar: '/static/mock-images/avatars/avatar-alcides_antonio.png',\n    name: 'Alcides Antonio',\n    username: 'alcides.antonio'\n  }],\n  type: 'GROUP',\n  unreadCount: 0\n}];\n\nconst findContactByUsername = username => {\n  const contact = contacts.find(_contact => _contact.username === username);\n  return contact || null;\n};\n\nconst findThreadById = threadId => {\n  const thread = threads.find(_threadId => _threadId.id === threadId);\n  return thread || null;\n}; // This means that we are looking for ONE_TO_ONE thread\n\n\nconst findThreadByOtherParticipantId = participantId => {\n  const thread = threads.find(_thread => {\n    if (_thread.type !== 'ONE_TO_ONE') {\n      return false;\n    }\n\n    const participant = _thread.participants.find(_participant => _participant.id === participantId);\n\n    return !!participant;\n  });\n  return thread || null;\n};\n\nconst findThreadByParticipantIds = participantIds => {\n  const thread = threads.find(_thread => {\n    if (_thread.participants.length < participantIds.length) {\n      return false;\n    }\n\n    const foundParticipantIds = new Set();\n    thread.participants.forEach(participant => {\n      foundParticipantIds.add(participant.id);\n    });\n    return foundParticipantIds.size === participantIds.length;\n  });\n  return thread || null;\n};\n\nclass ChatApi {\n  getContacts() {\n    return Promise.resolve(deepCopy(contacts));\n  }\n\n  searchContacts(query) {\n    return new Promise((resolve, reject) => {\n      try {\n        let foundContacts = contacts;\n\n        if (query) {\n          const cleanQuery = query.toLowerCase().trim();\n          foundContacts = foundContacts.filter(contact => contact.name.toLowerCase().includes(cleanQuery));\n        }\n\n        resolve(deepCopy(foundContacts));\n      } catch (err) {\n        console.error('[Chat Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  getParticipants(threadKey) {\n    return new Promise((resolve, reject) => {\n      try {\n        const participants = []; // Thread key might be an ID if thread type is GROUP\n        // otherwise it represents an username\n\n        const thread = findThreadById(threadKey);\n\n        if (thread) {\n          participants.push(...thread.participants);\n        } else {\n          const contact = findContactByUsername(threadKey);\n\n          if (contact) {\n            participants.push({\n              id: contact.id,\n              avatar: contact.avatar,\n              name: contact.name,\n              username: contact.username\n            });\n          }\n        }\n\n        resolve(deepCopy(participants));\n      } catch (err) {\n        console.error('[Chat Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  getThreads() {\n    return Promise.resolve(deepCopy(threads));\n  }\n\n  getThread(threadKey) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Thread key might be an ID if thread type is GROUP\n        // otherwise it represents an username\n        let thread = findThreadById(threadKey);\n\n        if (thread) {\n          resolve(deepCopy(thread));\n          return;\n        } // At this point, thread key should represent an existing contact\n        // If no contact found, the user is trying a shady route\n        // If contact exists, user might want to start a new conversation\n\n\n        const contact = findContactByUsername(threadKey);\n\n        if (!contact) {\n          reject(new Error('Unable to find the contact'));\n          return;\n        } // This could return a null if no thread found\n\n\n        thread = findThreadByOtherParticipantId(contact.id);\n        resolve(deepCopy(thread));\n      } catch (err) {\n        console.error('[Chat Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  markThreadAsSeen(threadId) {\n    return new Promise((resolve, reject) => {\n      try {\n        const thread = threads.find(_thread => _thread.id === threadId);\n\n        if (thread) {\n          thread.unreadCount = 0;\n        }\n\n        resolve(true);\n      } catch (err) {\n        console.error('[Chat Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  addMessage({\n    threadId,\n    recipientIds,\n    body\n  }) {\n    // Adding a new message to a thread can by done in 3 ways\n    // 1) By specifying a thread id, this means that the thread already exists\n    // 2) By specifying the other user id (if ONE_TO_ONE thread), thread might exist\n    // 3) By specifying a list of recipients, thread might already exist\n    return new Promise((resolve, reject) => {\n      try {\n        // On server get current identity (user) from the request\n        const user = {\n          id: '5e86809283e28b96d2d38537',\n          avatar: '/static/mock-images/avatars/avatar-jane_rotanson.png',\n          name: 'Jane Rotanson',\n          username: 'jane.rotanson'\n        };\n        let thread = null; // Try to find the thread by threadId if provided\n\n        if (threadId) {\n          thread = findThreadById(threadId);\n\n          if (!thread) {\n            reject(new Error('Invalid thread id'));\n            return;\n          }\n        } // Try to find the thread by recipientIds is provided\n\n\n        if (recipientIds) {\n          const participantIds = [...recipientIds, user.id];\n          thread = findThreadByParticipantIds(participantIds);\n        }\n\n        const message = {\n          id: createResourceId(),\n          attachments: [],\n          body,\n          contentType: 'text',\n          createdAt: now.getTime(),\n          senderId: user.id\n        }; // If thread exists, add the message\n\n        if (thread) {\n          thread.messages.push(message);\n        } else {\n          // If it does not, it means that we have to create a new thread\n          const participants = [user];\n          recipientIds.forEach(recipientId => {\n            const contact = contacts.find(_contact => _contact.id === recipientId); // This should not naturally occur\n\n            if (!contact) {\n              throw new Error('Contact not found');\n            }\n\n            participants.push({\n              id: contact.id,\n              avatar: contact.avatar,\n              name: contact.name,\n              username: contact.username\n            });\n          });\n          thread = {\n            id: createResourceId(),\n            messages: [message],\n            participants,\n            type: participants.length === 2 ? 'ONE_TO_ONE' : 'GROUP',\n            unreadCount: 0\n          };\n        }\n\n        resolve({\n          threadId: thread.id,\n          message\n        });\n      } catch (err) {\n        console.error('[Chat Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n}\n\nexport const chatApi = new ChatApi();","map":{"version":3,"sources":["/home/ec2-user/environment/VarsityMediaLive07042021/src/__fakeApi__/chatApi.js"],"names":["subDays","subHours","subMinutes","createResourceId","deepCopy","now","Date","contacts","id","avatar","isActive","lastActivity","getTime","name","username","threads","messages","attachments","body","contentType","createdAt","senderId","participants","type","unreadCount","findContactByUsername","contact","find","_contact","findThreadById","threadId","thread","_threadId","findThreadByOtherParticipantId","participantId","_thread","participant","_participant","findThreadByParticipantIds","participantIds","length","foundParticipantIds","Set","forEach","add","size","ChatApi","getContacts","Promise","resolve","searchContacts","query","reject","foundContacts","cleanQuery","toLowerCase","trim","filter","includes","err","console","error","Error","getParticipants","threadKey","push","getThreads","getThread","markThreadAsSeen","addMessage","recipientIds","user","message","recipientId","chatApi"],"mappings":"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","sourcesContent":["import { subDays, subHours, subMinutes } from 'date-fns';\nimport createResourceId from '../utils/createResourceId';\nimport deepCopy from '../utils/deepCopy';\n\nconst now = new Date();\n\nconst contacts = [\n  {\n    id: '5e8891ab188cd2855e6029b7',\n    avatar: '/static/mock-images/avatars/avatar-alcides_antonio.png',\n    isActive: true,\n    lastActivity: now.getTime(),\n    name: 'Alcides Antonio',\n    username: 'alcides.antonio'\n  },\n  {\n    id: '5e887a62195cc5aef7e8ca5d',\n    avatar: '/static/mock-images/avatars/avatar-marcus_finn.png',\n    isActive: false,\n    lastActivity: subHours(now, 2).getTime(),\n    name: 'Marcus Finn',\n    username: 'marcus.finn'\n  },\n  {\n    id: '5e887ac47eed253091be10cb',\n    avatar: '/static/mock-images/avatars/avatar-carson_darrin.png',\n    isActive: false,\n    lastActivity: subMinutes(now, 15).getTime(),\n    name: 'Carson Darrin',\n    username: 'carson.darrin'\n  },\n  {\n    id: '5e887b209c28ac3dd97f6db5',\n    avatar: '/static/mock-images/avatars/avatar-fran_perez.png',\n    isActive: true,\n    lastActivity: now.getTime(),\n    name: 'Fran Perez',\n    username: 'fran.perez'\n  },\n  {\n    id: '5e887b7602bdbc4dbb234b27',\n    avatar: '/static/mock-images/avatars/avatar-jie_yan_song.png',\n    isActive: true,\n    lastActivity: now.getTime(),\n    name: 'Jie Yan Song',\n    username: 'jie.yan.song'\n  },\n  {\n    id: '5e86805e2bafd54f66cc95c3',\n    avatar: '/static/mock-images/avatars/avatar-miron_vitold.png',\n    isActive: false,\n    lastActivity: subDays(now, 2).getTime(),\n    name: 'Miron Vitold',\n    username: 'miron.vitold'\n  },\n  {\n    id: '5e887a1fbefd7938eea9c981',\n    avatar: '/static/mock-images/avatars/avatar-penjani_inyene.png',\n    isActive: false,\n    lastActivity: subHours(now, 6).getTime(),\n    name: 'Penjani Inyene',\n    username: 'penjani.inyene'\n  },\n  {\n    id: '5e887d0b3d090c1b8f162003',\n    avatar: '/static/mock-images/avatars/avatar-omar_darobe.png',\n    isActive: true,\n    lastActivity: now.getTime(),\n    name: 'Omar Darobe',\n    username: 'omar.darobe'\n  },\n  {\n    id: '5e88792be2d4cfb4bf0971d9',\n    avatar: '/static/mock-images/avatars/avatar-siegbert_gottfried.png',\n    isActive: true,\n    lastActivity: now.getTime(),\n    name: 'Siegbert Gottfried',\n    username: 'siegbert.gottfried'\n  },\n  {\n    id: '5e8877da9a65442b11551975',\n    avatar: '/static/mock-images/avatars/avatar-iulia_albu.png',\n    isActive: true,\n    lastActivity: now.getTime(),\n    name: 'Iulia Albu',\n    username: 'iulia.albu'\n  },\n  {\n    id: '5e8680e60cba5019c5ca6fda',\n    avatar: '/static/mock-images/avatars/avatar-nasimiyu_danai.png',\n    isActive: true,\n    lastActivity: now.getTime(),\n    name: 'Nasimiyu Danai',\n    username: 'nasimiyu.danai'\n  }\n];\n\nconst threads = [\n  {\n    id: '5e867eb9de721aecaccf4f7b',\n    messages: [\n      {\n        id: '5e867f0a5bc0ff2bfa07bfa6',\n        attachments: [],\n        body: 'Hey, nice projects! I really liked the one in react. What\\'s your quote on kinda similar project?',\n        contentType: 'text',\n        createdAt: subHours(now, 10).getTime(),\n        senderId: '5e86805e2bafd54f66cc95c3'\n      },\n      {\n        id: '5e867f167d5f78109ae9f2a4',\n        attachments: [],\n        body: 'I would need to know more details, but my hourly rate stats at $35/hour. Thanks!',\n        contentType: 'text',\n        createdAt: subHours(now, 2).getTime(),\n        senderId: '5e86809283e28b96d2d38537'\n      },\n      {\n        id: '5e867f1c9ca72084693528f4',\n        attachments: [],\n        body: 'Well it\\'s a really easy one, I\\'m sure we can make it half of the price.',\n        contentType: 'text',\n        createdAt: subMinutes(now, 5).getTime(),\n        senderId: '5e86805e2bafd54f66cc95c3'\n      },\n      {\n        id: '5e867f22fd2e27a09849b4db',\n        attachments: [],\n        body: 'Then why don\\'t you make it if it\\'s that easy? Sorry I\\'m not interetes, have fantastic day Adam!',\n        contentType: 'text',\n        createdAt: subMinutes(now, 3).getTime(),\n        senderId: '5e86809283e28b96d2d38537'\n      },\n      {\n        id: '5e867f28a34d45ac6eb5c41f',\n        attachments: [],\n        body: 'Last offer, $25 per hour',\n        contentType: 'text',\n        createdAt: subMinutes(now, 1).getTime(),\n        senderId: '5e86805e2bafd54f66cc95c3'\n      },\n      {\n        id: '5e867f2dba984a3f78b33526',\n        attachments: [],\n        body: '/static/mock-images/projects/project_4.png',\n        contentType: 'image',\n        createdAt: subMinutes(now, 1).getTime(),\n        senderId: '5e86805e2bafd54f66cc95c3'\n      }\n    ],\n    participants: [\n      {\n        id: '5e86809283e28b96d2d38537',\n        avatar: '/static/mock-images/avatars/avatar-jane_rotanson.png',\n        name: 'Jane Rotanson',\n        username: 'jane.rotanson'\n      },\n      {\n        id: '5e86805e2bafd54f66cc95c3',\n        avatar: '/static/mock-images/avatars/avatar-miron_vitold.png',\n        name: 'Miron Vitold',\n        username: 'miron.vitold'\n      }\n    ],\n    type: 'ONE_TO_ONE',\n    unreadCount: 2\n  },\n  {\n    id: '5e867fa7082c3c5921403a26',\n    messages: [\n      {\n        id: '5e867fc180837d901bd9bca1',\n        attachments: [],\n        body: 'Hey, would you like to collaborate?',\n        contentType: 'text',\n        createdAt: subMinutes(now, 6).getTime(),\n        senderId: '5e8680e60cba5019c5ca6fda'\n      },\n      {\n        id: '5e8d6fb695df7971237fc173',\n        attachments: [],\n        body: 'Hi, Merrile!',\n        contentType: 'text',\n        createdAt: subMinutes(now, 5).getTime(),\n        senderId: '5e86809283e28b96d2d38537'\n      },\n      {\n        id: '58825a290eb4d4271a54f188',\n        attachments: [],\n        body: 'Hello everyone ğŸ˜€',\n        contentType: 'text',\n        createdAt: subMinutes(now, 2).getTime(),\n        senderId: '5e8891ab188cd2855e6029b7'\n      }\n    ],\n    participants: [\n      {\n        id: '5e86809283e28b96d2d38537',\n        avatar: '/static/mock-images/avatars/avatar-jane_rotanson.png',\n        name: 'Jane Rotanson',\n        username: 'jane.rotanson'\n      },\n      {\n        id: '5e8680e60cba5019c5ca6fda',\n        avatar: '/static/mock-images/avatars/avatar-nasimiyu_danai.png',\n        name: 'Nasimiyu Danai',\n        username: 'nasimiyu.danai'\n      },\n      {\n        id: '5e8891ab188cd2855e6029b7',\n        avatar: '/static/mock-images/avatars/avatar-alcides_antonio.png',\n        name: 'Alcides Antonio',\n        username: 'alcides.antonio'\n      }\n    ],\n    type: 'GROUP',\n    unreadCount: 0\n  }\n];\n\nconst findContactByUsername = (username) => {\n  const contact = contacts.find((_contact) => _contact.username === username);\n\n  return contact || null;\n};\n\nconst findThreadById = (threadId) => {\n  const thread = threads.find((_threadId) => _threadId.id === threadId);\n\n  return thread || null;\n};\n\n// This means that we are looking for ONE_TO_ONE thread\nconst findThreadByOtherParticipantId = (participantId) => {\n  const thread = threads.find((_thread) => {\n    if (_thread.type !== 'ONE_TO_ONE') {\n      return false;\n    }\n\n    const participant = _thread.participants.find((_participant) => (_participant.id\n      === participantId));\n\n    return !!participant;\n  });\n\n  return thread || null;\n};\n\nconst findThreadByParticipantIds = (participantIds) => {\n  const thread = threads.find((_thread) => {\n    if (_thread.participants.length < participantIds.length) {\n      return false;\n    }\n\n    const foundParticipantIds = new Set();\n\n    thread.participants.forEach((participant) => {\n      foundParticipantIds.add(participant.id);\n    });\n\n    return foundParticipantIds.size === participantIds.length;\n  });\n\n  return thread || null;\n};\n\nclass ChatApi {\n  getContacts() {\n    return Promise.resolve(deepCopy(contacts));\n  }\n\n  searchContacts(query) {\n    return new Promise((resolve, reject) => {\n      try {\n        let foundContacts = contacts;\n\n        if (query) {\n          const cleanQuery = query.toLowerCase().trim();\n          foundContacts = foundContacts.filter((contact) => (contact.name.toLowerCase().includes(cleanQuery)));\n        }\n\n        resolve(deepCopy(foundContacts));\n      } catch (err) {\n        console.error('[Chat Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  getParticipants(threadKey) {\n    return new Promise((resolve, reject) => {\n      try {\n        const participants = [];\n\n        // Thread key might be an ID if thread type is GROUP\n        // otherwise it represents an username\n        const thread = findThreadById(threadKey);\n\n        if (thread) {\n          participants.push(...thread.participants);\n        } else {\n          const contact = findContactByUsername(threadKey);\n\n          if (contact) {\n            participants.push({\n              id: contact.id,\n              avatar: contact.avatar,\n              name: contact.name,\n              username: contact.username\n            });\n          }\n        }\n\n        resolve(deepCopy(participants));\n      } catch (err) {\n        console.error('[Chat Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  getThreads() {\n    return Promise.resolve(deepCopy(threads));\n  }\n\n  getThread(threadKey) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Thread key might be an ID if thread type is GROUP\n        // otherwise it represents an username\n        let thread = findThreadById(threadKey);\n\n        if (thread) {\n          resolve(deepCopy(thread));\n          return;\n        }\n\n        // At this point, thread key should represent an existing contact\n        // If no contact found, the user is trying a shady route\n        // If contact exists, user might want to start a new conversation\n        const contact = findContactByUsername(threadKey);\n\n        if (!contact) {\n          reject(new Error('Unable to find the contact'));\n          return;\n        }\n\n        // This could return a null if no thread found\n        thread = findThreadByOtherParticipantId(contact.id);\n\n        resolve(deepCopy(thread));\n      } catch (err) {\n        console.error('[Chat Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  markThreadAsSeen(threadId) {\n    return new Promise((resolve, reject) => {\n      try {\n        const thread = threads.find((_thread) => _thread.id === threadId);\n\n        if (thread) {\n          thread.unreadCount = 0;\n        }\n\n        resolve(true);\n      } catch (err) {\n        console.error('[Chat Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  addMessage({ threadId, recipientIds, body }) {\n    // Adding a new message to a thread can by done in 3 ways\n    // 1) By specifying a thread id, this means that the thread already exists\n    // 2) By specifying the other user id (if ONE_TO_ONE thread), thread might exist\n    // 3) By specifying a list of recipients, thread might already exist\n\n    return new Promise((resolve, reject) => {\n      try {\n        // On server get current identity (user) from the request\n        const user = {\n          id: '5e86809283e28b96d2d38537',\n          avatar: '/static/mock-images/avatars/avatar-jane_rotanson.png',\n          name: 'Jane Rotanson',\n          username: 'jane.rotanson'\n        };\n\n        let thread = null;\n\n        // Try to find the thread by threadId if provided\n        if (threadId) {\n          thread = findThreadById(threadId);\n\n          if (!thread) {\n            reject(new Error('Invalid thread id'));\n            return;\n          }\n        }\n\n        // Try to find the thread by recipientIds is provided\n        if (recipientIds) {\n          const participantIds = [...recipientIds, user.id];\n\n          thread = findThreadByParticipantIds(participantIds);\n        }\n\n        const message = {\n          id: createResourceId(),\n          attachments: [],\n          body,\n          contentType: 'text',\n          createdAt: now.getTime(),\n          senderId: user.id\n        };\n\n        // If thread exists, add the message\n        if (thread) {\n          thread.messages.push(message);\n        } else {\n          // If it does not, it means that we have to create a new thread\n          const participants = [user];\n\n          recipientIds.forEach((recipientId) => {\n            const contact = contacts.find((_contact) => _contact.id === recipientId);\n\n            // This should not naturally occur\n            if (!contact) {\n              throw new Error('Contact not found');\n            }\n\n            participants.push({\n              id: contact.id,\n              avatar: contact.avatar,\n              name: contact.name,\n              username: contact.username\n            });\n          });\n\n          thread = {\n            id: createResourceId(),\n            messages: [message],\n            participants,\n            type: participants.length === 2 ? 'ONE_TO_ONE' : 'GROUP',\n            unreadCount: 0\n          };\n        }\n\n        resolve({\n          threadId: thread.id,\n          message\n        });\n      } catch (err) {\n        console.error('[Chat Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n}\n\nexport const chatApi = new ChatApi();\n"]},"metadata":{},"sourceType":"module"}