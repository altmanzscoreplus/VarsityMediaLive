{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/environment/VarsityMediaLive07042021/src/components/dashboard/mail/MailList.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Box, Divider } from '@material-ui/core';\nimport { getEmails } from '../../../slices/mail';\nimport { useDispatch, useSelector } from '../../../store';\nimport MailItem from './MailItem';\nimport MailListToolbar from './MailListToolbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MailList = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    customLabel,\n    systemLabel\n  } = useParams();\n  const {\n    emails\n  } = useSelector(state => state.mail);\n  const [selectedEmails, setSelectedEmails] = useState([]);\n  useEffect(() => {\n    dispatch(getEmails({\n      customLabel,\n      systemLabel\n    }));\n  }, [customLabel, systemLabel]);\n\n  const handleSelectAllEmails = () => {\n    setSelectedEmails(emails.allIds.map(emailId => emailId));\n  };\n\n  const handleDeselectAllEmails = () => {\n    setSelectedEmails([]);\n  };\n\n  const handleSelectOneEmail = emailId => {\n    setSelectedEmails(prevSelectedMails => {\n      if (!prevSelectedMails.includes(emailId)) {\n        return [...prevSelectedMails, emailId];\n      }\n\n      return prevSelectedMails;\n    });\n  };\n\n  const handleDeselectOneEmail = emailId => {\n    setSelectedEmails(prevSelectedMails => prevSelectedMails.filter(id => id !== emailId));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      backgroundColor: 'background.default',\n      flexGrow: 1,\n      overflow: 'hidden'\n    },\n    ...props,\n    children: [/*#__PURE__*/_jsxDEV(MailListToolbar, {\n      emails: emails.allIds.length,\n      onDeselectAll: handleDeselectAllEmails,\n      onSelectAll: handleSelectAllEmails,\n      selectedEmails: selectedEmails.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), emails.allIds.map(emailId => /*#__PURE__*/_jsxDEV(MailItem, {\n      email: emails.byId[emailId],\n      onDeselect: () => handleDeselectOneEmail(emailId),\n      onSelect: () => handleSelectOneEmail(emailId),\n      selected: selectedEmails.includes(emailId)\n    }, emailId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MailList, \"vJl0zlj0dOL1jmiGT2ttUQHT8No=\", false, function () {\n  return [useDispatch, useParams, useSelector];\n});\n\n_c = MailList;\nexport default MailList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MailList\");","map":{"version":3,"sources":["/home/ec2-user/environment/VarsityMediaLive07042021/src/components/dashboard/mail/MailList.js"],"names":["useEffect","useState","useParams","Box","Divider","getEmails","useDispatch","useSelector","MailItem","MailListToolbar","MailList","props","dispatch","customLabel","systemLabel","emails","state","mail","selectedEmails","setSelectedEmails","handleSelectAllEmails","allIds","map","emailId","handleDeselectAllEmails","handleSelectOneEmail","prevSelectedMails","includes","handleDeselectOneEmail","filter","id","backgroundColor","flexGrow","overflow","length","byId"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Box, Divider } from '@material-ui/core';\nimport { getEmails } from '../../../slices/mail';\nimport { useDispatch, useSelector } from '../../../store';\nimport MailItem from './MailItem';\nimport MailListToolbar from './MailListToolbar';\n\nconst MailList = (props) => {\n  const dispatch = useDispatch();\n  const { customLabel, systemLabel } = useParams();\n  const { emails } = useSelector((state) => state.mail);\n  const [selectedEmails, setSelectedEmails] = useState([]);\n\n  useEffect(() => {\n    dispatch(getEmails({ customLabel, systemLabel }));\n  }, [customLabel, systemLabel]);\n\n  const handleSelectAllEmails = () => {\n    setSelectedEmails(emails.allIds.map(((emailId) => emailId)));\n  };\n\n  const handleDeselectAllEmails = () => {\n    setSelectedEmails([]);\n  };\n\n  const handleSelectOneEmail = (emailId) => {\n    setSelectedEmails((prevSelectedMails) => {\n      if (!prevSelectedMails.includes(emailId)) {\n        return [...prevSelectedMails, emailId];\n      }\n\n      return prevSelectedMails;\n    });\n  };\n\n  const handleDeselectOneEmail = (emailId) => {\n    setSelectedEmails((prevSelectedMails) => prevSelectedMails.filter((id) => id !== emailId));\n  };\n\n  return (\n    <Box\n      sx={{\n        backgroundColor: 'background.default',\n        flexGrow: 1,\n        overflow: 'hidden'\n      }}\n      {...props}\n    >\n      <MailListToolbar\n        emails={emails.allIds.length}\n        onDeselectAll={handleDeselectAllEmails}\n        onSelectAll={handleSelectAllEmails}\n        selectedEmails={selectedEmails.length}\n      />\n      <Divider />\n      {emails.allIds.map((emailId) => (\n        <MailItem\n          email={emails.byId[emailId]}\n          key={emailId}\n          onDeselect={() => handleDeselectOneEmail(emailId)}\n          onSelect={() => handleSelectOneEmail(emailId)}\n          selected={selectedEmails.includes(emailId)}\n        />\n      ))}\n    </Box>\n  );\n};\n\nexport default MailList;\n"]},"metadata":{},"sourceType":"module"}