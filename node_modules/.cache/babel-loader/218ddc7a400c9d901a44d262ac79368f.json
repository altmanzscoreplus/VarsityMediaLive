{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/environment/VarsityMediaLive07042021/src/contexts/AmplifyContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport Amplify, { Auth } from 'aws-amplify';\nimport { amplifyConfig } from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nAmplify.configure(amplifyConfig);\nconst initialState = {\n  isAuthenticated: false,\n  isInitialized: false,\n  user: null\n};\nconst handlers = {\n  INITIALIZE: (state, action) => {\n    const {\n      isAuthenticated,\n      user\n    } = action.payload;\n    return { ...state,\n      isAuthenticated,\n      isInitialized: true,\n      user\n    };\n  },\n  LOGIN: (state, action) => {\n    const {\n      user\n    } = action.payload;\n    return { ...state,\n      isAuthenticated: true,\n      user\n    };\n  },\n  LOGOUT: state => ({ ...state,\n    isAuthenticated: false,\n    user: null\n  }),\n  REGISTER: state => ({ ...state\n  }),\n  VERIFY_CODE: state => ({ ...state\n  }),\n  RESEND_CODE: state => ({ ...state\n  }),\n  PASSWORD_RECOVERY: state => ({ ...state\n  }),\n  PASSWORD_RESET: state => ({ ...state\n  })\n};\n\nconst reducer = (state, action) => handlers[action.type] ? handlers[action.type](state, action) : state;\n\nconst AuthContext = /*#__PURE__*/createContext({ ...initialState,\n  platform: 'Amplify',\n  login: () => Promise.resolve(),\n  logout: () => Promise.resolve(),\n  register: () => Promise.resolve(),\n  verifyCode: () => Promise.resolve(),\n  resendCode: () => Promise.resolve(),\n  passwordRecovery: () => Promise.resolve(),\n  passwordReset: () => Promise.resolve()\n});\nexport const AuthProvider = props => {\n  _s();\n\n  const {\n    children\n  } = props;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    const initialize = async () => {\n      try {\n        const user = await Auth.currentAuthenticatedUser(); // Here you should extract the complete user profile to make it\n        // available in your entire app.\n        // The auth state only provides basic information.\n\n        dispatch({\n          type: 'INITIALIZE',\n          payload: {\n            isAuthenticated: true,\n            user: {\n              id: user.sub,\n              avatar: '/static/mock-images/avatars/avatar-jane_rotanson.png',\n              email: user.attributes.email,\n              name: 'Jane Rotanson',\n              plan: 'Premium'\n            }\n          }\n        });\n      } catch (error) {\n        dispatch({\n          type: 'INITIALIZE',\n          payload: {\n            isAuthenticated: false,\n            user: null\n          }\n        });\n      }\n    };\n\n    initialize();\n  }, []);\n\n  const login = async (email, password) => {\n    const user = await Auth.signIn(email, password);\n\n    if (user.challengeName) {\n      console.error(`Unable to login, because challenge \"${user.challengeName}\" is mandated and we did not handle this case.`);\n      return;\n    }\n\n    dispatch({\n      type: 'LOGIN',\n      payload: {\n        user: {\n          id: user.attributes.sub,\n          avatar: '/static/mock-images/avatars/avatar-jane_rotanson.png',\n          email: user.attributes.email,\n          name: 'Jane Rotanson',\n          plan: 'Premium'\n        }\n      }\n    });\n  };\n\n  const logout = async () => {\n    await Auth.signOut();\n    dispatch({\n      type: 'LOGOUT'\n    });\n  };\n\n  const register = async (email, password) => {\n    await Auth.signUp({\n      username: email,\n      password,\n      attributes: {\n        email\n      }\n    });\n    dispatch({\n      type: 'REGISTER'\n    });\n  };\n\n  const verifyCode = async (username, code) => {\n    await Auth.confirmSignUp(username, code);\n    dispatch({\n      type: 'VERIFY_CODE'\n    });\n  };\n\n  const resendCode = async username => {\n    await Auth.resendSignUp(username);\n    dispatch({\n      type: 'RESEND_CODE'\n    });\n  };\n\n  const passwordRecovery = async username => {\n    await Auth.forgotPassword(username);\n    dispatch({\n      type: 'PASSWORD_RECOVERY'\n    });\n  };\n\n  const passwordReset = async (username, code, newPassword) => {\n    await Auth.forgotPasswordSubmit(username, code, newPassword);\n    dispatch({\n      type: 'PASSWORD_RESET'\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: { ...state,\n      platform: 'Amplify',\n      login,\n      logout,\n      register,\n      verifyCode,\n      resendCode,\n      passwordRecovery,\n      passwordReset\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = AuthProvider;\nAuthProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/home/ec2-user/environment/VarsityMediaLive07042021/src/contexts/AmplifyContext.js"],"names":["createContext","useEffect","useReducer","PropTypes","Amplify","Auth","amplifyConfig","configure","initialState","isAuthenticated","isInitialized","user","handlers","INITIALIZE","state","action","payload","LOGIN","LOGOUT","REGISTER","VERIFY_CODE","RESEND_CODE","PASSWORD_RECOVERY","PASSWORD_RESET","reducer","type","AuthContext","platform","login","Promise","resolve","logout","register","verifyCode","resendCode","passwordRecovery","passwordReset","AuthProvider","props","children","dispatch","initialize","currentAuthenticatedUser","id","sub","avatar","email","attributes","name","plan","error","password","signIn","challengeName","console","signOut","signUp","username","code","confirmSignUp","resendSignUp","forgotPassword","newPassword","forgotPasswordSubmit","propTypes","node","isRequired"],"mappings":"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","sourcesContent":["import { createContext, useEffect, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport Amplify, { Auth } from 'aws-amplify';\nimport { amplifyConfig } from '../config';\n\nAmplify.configure(amplifyConfig);\n\nconst initialState = {\n  isAuthenticated: false,\n  isInitialized: false,\n  user: null\n};\n\nconst handlers = {\n  INITIALIZE: (state, action) => {\n    const { isAuthenticated, user } = action.payload;\n\n    return {\n      ...state,\n      isAuthenticated,\n      isInitialized: true,\n      user\n    };\n  },\n  LOGIN: (state, action) => {\n    const { user } = action.payload;\n\n    return {\n      ...state,\n      isAuthenticated: true,\n      user\n    };\n  },\n  LOGOUT: (state) => ({\n    ...state,\n    isAuthenticated: false,\n    user: null\n  }),\n  REGISTER: (state) => ({ ...state }),\n  VERIFY_CODE: (state) => ({ ...state }),\n  RESEND_CODE: (state) => ({ ...state }),\n  PASSWORD_RECOVERY: (state) => ({ ...state }),\n  PASSWORD_RESET: (state) => ({ ...state })\n};\n\nconst reducer = (state, action) => (handlers[action.type]\n  ? handlers[action.type](state, action)\n  : state);\n\nconst AuthContext = createContext({\n  ...initialState,\n  platform: 'Amplify',\n  login: () => Promise.resolve(),\n  logout: () => Promise.resolve(),\n  register: () => Promise.resolve(),\n  verifyCode: () => Promise.resolve(),\n  resendCode: () => Promise.resolve(),\n  passwordRecovery: () => Promise.resolve(),\n  passwordReset: () => Promise.resolve()\n});\n\nexport const AuthProvider = (props) => {\n  const { children } = props;\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    const initialize = async () => {\n      try {\n        const user = await Auth.currentAuthenticatedUser();\n\n        // Here you should extract the complete user profile to make it\n        // available in your entire app.\n        // The auth state only provides basic information.\n\n        dispatch({\n          type: 'INITIALIZE',\n          payload: {\n            isAuthenticated: true,\n            user: {\n              id: user.sub,\n              avatar: '/static/mock-images/avatars/avatar-jane_rotanson.png',\n              email: user.attributes.email,\n              name: 'Jane Rotanson',\n              plan: 'Premium'\n            }\n          }\n        });\n      } catch (error) {\n        dispatch({\n          type: 'INITIALIZE',\n          payload: {\n            isAuthenticated: false,\n            user: null\n          }\n        });\n      }\n    };\n\n    initialize();\n  }, []);\n\n  const login = async (email, password) => {\n    const user = await Auth.signIn(email, password);\n\n    if (user.challengeName) {\n      console.error(`Unable to login, because challenge \"${user.challengeName}\" is mandated and we did not handle this case.`);\n      return;\n    }\n\n    dispatch({\n      type: 'LOGIN',\n      payload: {\n        user: {\n          id: user.attributes.sub,\n          avatar: '/static/mock-images/avatars/avatar-jane_rotanson.png',\n          email: user.attributes.email,\n          name: 'Jane Rotanson',\n          plan: 'Premium'\n        }\n      }\n    });\n  };\n\n  const logout = async () => {\n    await Auth.signOut();\n    dispatch({\n      type: 'LOGOUT'\n    });\n  };\n\n  const register = async (email, password) => {\n    await Auth.signUp({\n      username: email,\n      password,\n      attributes: { email }\n    });\n    dispatch({\n      type: 'REGISTER'\n    });\n  };\n\n  const verifyCode = async (username, code) => {\n    await Auth.confirmSignUp(username, code);\n    dispatch({\n      type: 'VERIFY_CODE'\n    });\n  };\n\n  const resendCode = async (username) => {\n    await Auth.resendSignUp(username);\n    dispatch({\n      type: 'RESEND_CODE'\n    });\n  };\n\n  const passwordRecovery = async (username) => {\n    await Auth.forgotPassword(username);\n    dispatch({\n      type: 'PASSWORD_RECOVERY'\n    });\n  };\n\n  const passwordReset = async (username, code, newPassword) => {\n    await Auth.forgotPasswordSubmit(username, code, newPassword);\n    dispatch({\n      type: 'PASSWORD_RESET'\n    });\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        ...state,\n        platform: 'Amplify',\n        login,\n        logout,\n        register,\n        verifyCode,\n        resendCode,\n        passwordRecovery,\n        passwordReset\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nAuthProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default AuthContext;\n"]},"metadata":{},"sourceType":"module"}