{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/environment/VarsityMediaLive07042021/src/components/Label.js\";\nimport PropTypes from 'prop-types';\nimport { experimentalStyled } from '@material-ui/core/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LabelRoot = experimentalStyled('span')(({\n  theme,\n  styleProps\n}) => {\n  const backgroundColor = theme.palette[styleProps.color].main;\n  const color = theme.palette[styleProps.color].contrastText;\n  return {\n    alignItems: 'center',\n    backgroundColor,\n    borderRadius: theme.shape.borderRadius,\n    color,\n    cursor: 'default',\n    display: 'inline-flex',\n    flexGrow: 0,\n    flexShrink: 0,\n    fontFamily: theme.typography.fontFamily,\n    fontSize: theme.typography.pxToRem(11),\n    fontWeight: theme.typography.fontWeightMedium,\n    justifyContent: 'center',\n    letterSpacing: 0.5,\n    minWidth: 20,\n    paddingBottom: theme.spacing(0.5),\n    paddingLeft: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n    paddingTop: theme.spacing(0.5),\n    textTransform: 'uppercase',\n    whiteSpace: 'nowrap'\n  };\n});\n\nconst Label = props => {\n  const {\n    color = 'primary',\n    children,\n    ...other\n  } = props;\n  const styleProps = {\n    color\n  };\n  return /*#__PURE__*/_jsxDEV(LabelRoot, {\n    styleProps: styleProps,\n    ...other,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Label;\nLabel.propTypes = {\n  children: PropTypes.node,\n  color: PropTypes.oneOf(['primary', 'secondary', 'error', 'warning', 'success'])\n};\nexport default Label;\n\nvar _c;\n\n$RefreshReg$(_c, \"Label\");","map":{"version":3,"sources":["/home/ec2-user/environment/VarsityMediaLive07042021/src/components/Label.js"],"names":["PropTypes","experimentalStyled","LabelRoot","theme","styleProps","backgroundColor","palette","color","main","contrastText","alignItems","borderRadius","shape","cursor","display","flexGrow","flexShrink","fontFamily","typography","fontSize","pxToRem","fontWeight","fontWeightMedium","justifyContent","letterSpacing","minWidth","paddingBottom","spacing","paddingLeft","paddingRight","paddingTop","textTransform","whiteSpace","Label","props","children","other","propTypes","node","oneOf"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,kBAAT,QAAmC,0BAAnC;;AAEA,MAAMC,SAAS,GAAGD,kBAAkB,CAAC,MAAD,CAAlB,CAA4B,CAAC;AAAEE,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA2B;AACvE,QAAMC,eAAe,GAAGF,KAAK,CAACG,OAAN,CAAcF,UAAU,CAACG,KAAzB,EAAgCC,IAAxD;AACA,QAAMD,KAAK,GAAGJ,KAAK,CAACG,OAAN,CAAcF,UAAU,CAACG,KAAzB,EAAgCE,YAA9C;AAEA,SAAO;AACLC,IAAAA,UAAU,EAAE,QADP;AAELL,IAAAA,eAFK;AAGLM,IAAAA,YAAY,EAAER,KAAK,CAACS,KAAN,CAAYD,YAHrB;AAILJ,IAAAA,KAJK;AAKLM,IAAAA,MAAM,EAAE,SALH;AAMLC,IAAAA,OAAO,EAAE,aANJ;AAOLC,IAAAA,QAAQ,EAAE,CAPL;AAQLC,IAAAA,UAAU,EAAE,CARP;AASLC,IAAAA,UAAU,EAAEd,KAAK,CAACe,UAAN,CAAiBD,UATxB;AAULE,IAAAA,QAAQ,EAAEhB,KAAK,CAACe,UAAN,CAAiBE,OAAjB,CAAyB,EAAzB,CAVL;AAWLC,IAAAA,UAAU,EAAElB,KAAK,CAACe,UAAN,CAAiBI,gBAXxB;AAYLC,IAAAA,cAAc,EAAE,QAZX;AAaLC,IAAAA,aAAa,EAAE,GAbV;AAcLC,IAAAA,QAAQ,EAAE,EAdL;AAeLC,IAAAA,aAAa,EAAEvB,KAAK,CAACwB,OAAN,CAAc,GAAd,CAfV;AAgBLC,IAAAA,WAAW,EAAEzB,KAAK,CAACwB,OAAN,CAAc,CAAd,CAhBR;AAiBLE,IAAAA,YAAY,EAAE1B,KAAK,CAACwB,OAAN,CAAc,CAAd,CAjBT;AAkBLG,IAAAA,UAAU,EAAE3B,KAAK,CAACwB,OAAN,CAAc,GAAd,CAlBP;AAmBLI,IAAAA,aAAa,EAAE,WAnBV;AAoBLC,IAAAA,UAAU,EAAE;AApBP,GAAP;AAsBD,CA1BiB,CAAlB;;AA4BA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACvB,QAAM;AAAE3B,IAAAA,KAAK,GAAG,SAAV;AAAqB4B,IAAAA,QAArB;AAA+B,OAAGC;AAAlC,MAA4CF,KAAlD;AAEA,QAAM9B,UAAU,GAAG;AAAEG,IAAAA;AAAF,GAAnB;AAEA,sBACE,QAAC,SAAD;AACE,IAAA,UAAU,EAAEH,UADd;AAAA,OAEMgC,KAFN;AAAA,cAIGD;AAJH;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAbD;;KAAMF,K;AAeNA,KAAK,CAACI,SAAN,GAAkB;AAChBF,EAAAA,QAAQ,EAAEnC,SAAS,CAACsC,IADJ;AAEhB/B,EAAAA,KAAK,EAAEP,SAAS,CAACuC,KAAV,CAAgB,CACrB,SADqB,EAErB,WAFqB,EAGrB,OAHqB,EAIrB,SAJqB,EAKrB,SALqB,CAAhB;AAFS,CAAlB;AAWA,eAAeN,KAAf","sourcesContent":["import PropTypes from 'prop-types';\nimport { experimentalStyled } from '@material-ui/core/styles';\n\nconst LabelRoot = experimentalStyled('span')((({ theme, styleProps }) => {\n  const backgroundColor = theme.palette[styleProps.color].main;\n  const color = theme.palette[styleProps.color].contrastText;\n\n  return {\n    alignItems: 'center',\n    backgroundColor,\n    borderRadius: theme.shape.borderRadius,\n    color,\n    cursor: 'default',\n    display: 'inline-flex',\n    flexGrow: 0,\n    flexShrink: 0,\n    fontFamily: theme.typography.fontFamily,\n    fontSize: theme.typography.pxToRem(11),\n    fontWeight: theme.typography.fontWeightMedium,\n    justifyContent: 'center',\n    letterSpacing: 0.5,\n    minWidth: 20,\n    paddingBottom: theme.spacing(0.5),\n    paddingLeft: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n    paddingTop: theme.spacing(0.5),\n    textTransform: 'uppercase',\n    whiteSpace: 'nowrap'\n  };\n}));\n\nconst Label = (props) => {\n  const { color = 'primary', children, ...other } = props;\n\n  const styleProps = { color };\n\n  return (\n    <LabelRoot\n      styleProps={styleProps}\n      {...other}\n    >\n      {children}\n    </LabelRoot>\n  );\n};\n\nLabel.propTypes = {\n  children: PropTypes.node,\n  color: PropTypes.oneOf([\n    'primary',\n    'secondary',\n    'error',\n    'warning',\n    'success'\n  ])\n};\n\nexport default Label;\n"]},"metadata":{},"sourceType":"module"}