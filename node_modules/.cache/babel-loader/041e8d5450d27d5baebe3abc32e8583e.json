{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/environment/VarsityMediaLive07042021/src/components/authentication/password-reset/PasswordResetAmplify.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { Box, Button, FormHelperText, TextField, Typography } from '@material-ui/core';\nimport useAuth from '../../../hooks/useAuth';\nimport useMounted from '../../../hooks/useMounted';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PasswordResetAmplify = () => {\n  _s();\n\n  var _location$state;\n\n  const mounted = useMounted();\n  const {\n    passwordReset\n  } = useAuth();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const itemsRef = useRef([]);\n  useEffect(() => {\n    itemsRef.current = itemsRef.current.slice(0, 6);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      code: ['', '', '', '', '', ''],\n      email: ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.username) || '',\n      password: '',\n      passwordConfirm: '',\n      submit: null\n    },\n    validationSchema: Yup.object().shape({\n      code: Yup.array().of(Yup.string().required('Code is required')),\n      email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n      password: Yup.string().min(7, 'Must be at least 7 characters').max(255).required('Required'),\n      passwordConfirm: Yup.string().oneOf([Yup.ref('password'), null], 'Passwords must match').required('Required')\n    }),\n    onSubmit: async (values, {\n      setErrors,\n      setStatus,\n      setSubmitting\n    }) => {\n      try {\n        await passwordReset(values.email, values.code.join(''), values.password);\n        navigate('/authentication/login');\n      } catch (err) {\n        console.error(err);\n\n        if (mounted.current) {\n          setStatus({\n            success: false\n          });\n          setErrors({\n            submit: err.message\n          });\n          setSubmitting(false);\n        }\n      }\n    },\n    children: ({\n      errors,\n      handleBlur,\n      handleChange,\n      handleSubmit,\n      isSubmitting,\n      setFieldValue,\n      touched,\n      values\n    }) => {\n      var _location$state2;\n\n      return /*#__PURE__*/_jsxDEV(\"form\", {\n        noValidate: true,\n        onSubmit: handleSubmit,\n        children: [!((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.username) ? /*#__PURE__*/_jsxDEV(TextField, {\n          autoFocus: true,\n          error: Boolean(touched.email && errors.email),\n          fullWidth: true,\n          helperText: touched.email && errors.email,\n          label: \"Email Address\",\n          margin: \"normal\",\n          name: \"email\",\n          onBlur: handleBlur,\n          onChange: handleChange,\n          type: \"email\",\n          value: values.email,\n          variant: \"outlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(TextField, {\n          disabled: true,\n          fullWidth: true,\n          margin: \"normal\",\n          value: location.state.username,\n          variant: \"outlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"textSecondary\",\n          sx: {\n            mb: 2,\n            mt: 3\n          },\n          variant: \"subtitle2\",\n          children: \"Verification code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            columnGap: '16px',\n            display: 'grid',\n            gridTemplateColumns: 'repeat(7, 1fr)',\n            py: 1\n          },\n          children: [1, 2, 3, 4, 5, 6].map((ref, i) => /*#__PURE__*/_jsxDEV(TextField, {\n            error: Boolean(Array.isArray(touched.code) && touched.code.length === 6 && errors.code),\n            fullWidth: true,\n            inputRef: el => itemsRef.current[i] = el // eslint-disable-next-line react/no-array-index-key\n            ,\n            name: `code[${i}]`,\n            onBlur: handleBlur,\n            onKeyDown: event => {\n              if (event.code === 'ENTER') {\n                if (values.code[i]) {\n                  setFieldValue(`code[${i}]`, '');\n                  return;\n                }\n\n                if (i > 0) {\n                  setFieldValue(`code[${i}]`, '');\n                  itemsRef.current[i - 1].focus();\n                  return;\n                }\n              }\n\n              if (Number.isInteger(parseInt(event.key, 10))) {\n                setFieldValue(`code[${i}]`, event.key);\n\n                if (i < 5) {\n                  itemsRef.current[i + 1].focus();\n                }\n              }\n            },\n            onPaste: event => {\n              const paste = event.clipboardData.getData('text');\n              const pasteArray = paste.split('');\n\n              if (pasteArray.length !== 6) {\n                return;\n              }\n\n              let valid = true;\n              pasteArray.forEach(x => {\n                if (!Number.isInteger(parseInt(x, 10))) {\n                  valid = false;\n                }\n              });\n\n              if (valid) {\n                setFieldValue('code', pasteArray);\n                itemsRef.current[5].focus();\n              }\n            },\n            value: values.code[i],\n            sx: {\n              display: 'inline-block',\n              textAlign: 'center',\n              '& .MuiInputBase-input': {\n                textAlign: 'center'\n              }\n            },\n            variant: \"outlined\"\n          }, `codeNumber-${i}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), Boolean(Array.isArray(touched.code) && touched.code.length === 6 && errors.code) && /*#__PURE__*/_jsxDEV(FormHelperText, {\n          error: true,\n          sx: {\n            mx: '14px'\n          },\n          children: Array.isArray(errors.code) && errors.code.find(x => x !== undefined)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          error: Boolean(touched.password && errors.password),\n          fullWidth: true,\n          helperText: touched.password && errors.password,\n          label: \"Password\",\n          margin: \"normal\",\n          name: \"password\",\n          onBlur: handleBlur,\n          onChange: handleChange,\n          type: \"password\",\n          value: values.password,\n          variant: \"outlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          error: Boolean(touched.passwordConfirm && errors.passwordConfirm),\n          fullWidth: true,\n          helperText: touched.passwordConfirm && errors.passwordConfirm,\n          label: \"Password Confirmation\",\n          margin: \"normal\",\n          name: \"passwordConfirm\",\n          onBlur: handleBlur,\n          onChange: handleChange,\n          type: \"password\",\n          value: values.passwordConfirm,\n          variant: \"outlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this), errors.submit && /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 3\n          },\n          children: /*#__PURE__*/_jsxDEV(FormHelperText, {\n            error: true,\n            children: errors.submit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 3\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            color: \"primary\",\n            disabled: isSubmitting,\n            fullWidth: true,\n            size: \"large\",\n            type: \"submit\",\n            variant: \"contained\",\n            children: \"Reset Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PasswordResetAmplify, \"WIzt/oFkRj1G7o795pcifqEmNNI=\", false, function () {\n  return [useMounted, useAuth, useLocation, useNavigate];\n});\n\n_c = PasswordResetAmplify;\nexport default PasswordResetAmplify;\n\nvar _c;\n\n$RefreshReg$(_c, \"PasswordResetAmplify\");","map":{"version":3,"sources":["/home/ec2-user/environment/VarsityMediaLive07042021/src/components/authentication/password-reset/PasswordResetAmplify.js"],"names":["useEffect","useRef","useLocation","useNavigate","Yup","Formik","Box","Button","FormHelperText","TextField","Typography","useAuth","useMounted","PasswordResetAmplify","mounted","passwordReset","location","navigate","itemsRef","current","slice","code","email","state","username","password","passwordConfirm","submit","object","shape","array","of","string","required","max","min","oneOf","ref","values","setErrors","setStatus","setSubmitting","join","err","console","error","success","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","setFieldValue","touched","Boolean","mb","mt","columnGap","display","gridTemplateColumns","py","map","i","Array","isArray","length","el","event","focus","Number","isInteger","parseInt","key","paste","clipboardData","getData","pasteArray","split","valid","forEach","x","textAlign","mx","find","undefined"],"mappings":"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","sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { Box, Button, FormHelperText, TextField, Typography } from '@material-ui/core';\nimport useAuth from '../../../hooks/useAuth';\nimport useMounted from '../../../hooks/useMounted';\n\nconst PasswordResetAmplify = () => {\n  const mounted = useMounted();\n  const { passwordReset } = useAuth();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const itemsRef = useRef([]);\n\n  useEffect(() => {\n    itemsRef.current = itemsRef.current.slice(0, 6);\n  }, []);\n\n  return (\n    <Formik\n      initialValues={{\n        code: ['', '', '', '', '', ''],\n        email: location.state?.username || '',\n        password: '',\n        passwordConfirm: '',\n        submit: null\n      }}\n      validationSchema={\n        Yup\n          .object()\n          .shape({\n            code: Yup\n              .array()\n              .of(Yup.string().required('Code is required')),\n            email: Yup\n              .string()\n              .email('Must be a valid email')\n              .max(255)\n              .required('Email is required'),\n            password: Yup\n              .string()\n              .min(7, 'Must be at least 7 characters')\n              .max(255)\n              .required('Required'),\n            passwordConfirm: Yup\n              .string()\n              .oneOf([Yup.ref('password'), null], 'Passwords must match')\n              .required('Required')\n          })\n      }\n      onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n        try {\n          await passwordReset(values.email, values.code.join(''), values.password);\n\n          navigate('/authentication/login');\n        } catch (err) {\n          console.error(err);\n          if (mounted.current) {\n            setStatus({ success: false });\n            setErrors({ submit: err.message });\n            setSubmitting(false);\n          }\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        setFieldValue,\n        touched,\n        values\n      }) => (\n        <form\n          noValidate\n          onSubmit={handleSubmit}\n        >\n          {!location.state?.username\n            ? (\n              <TextField\n                autoFocus\n                error={Boolean(touched.email && errors.email)}\n                fullWidth\n                helperText={touched.email && errors.email}\n                label=\"Email Address\"\n                margin=\"normal\"\n                name=\"email\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                type=\"email\"\n                value={values.email}\n                variant=\"outlined\"\n              />\n            )\n            : (\n              <TextField\n                disabled\n                fullWidth\n                margin=\"normal\"\n                value={location.state.username}\n                variant=\"outlined\"\n              />\n            )}\n          <Typography\n            color=\"textSecondary\"\n            sx={{\n              mb: 2,\n              mt: 3\n            }}\n            variant=\"subtitle2\"\n          >\n            Verification code\n          </Typography>\n          <Box\n            sx={{\n              columnGap: '16px',\n              display: 'grid',\n              gridTemplateColumns: 'repeat(7, 1fr)',\n              py: 1\n            }}\n          >\n            {[1, 2, 3, 4, 5, 6].map((ref, i) => (\n              <TextField\n                error={Boolean(Array.isArray(touched.code)\n                  && touched.code.length === 6\n                  && errors.code)}\n                fullWidth\n                inputRef={(el) => itemsRef.current[i] = el}\n                // eslint-disable-next-line react/no-array-index-key\n                key={`codeNumber-${i}`}\n                name={`code[${i}]`}\n                onBlur={handleBlur}\n                onKeyDown={(event) => {\n                  if (event.code === 'ENTER') {\n                    if (values.code[i]) {\n                      setFieldValue(`code[${i}]`, '');\n                      return;\n                    }\n\n                    if (i > 0) {\n                      setFieldValue(`code[${i}]`, '');\n                      itemsRef.current[i - 1].focus();\n                      return;\n                    }\n                  }\n\n                  if (Number.isInteger(parseInt(event.key, 10))) {\n                    setFieldValue(`code[${i}]`, event.key);\n\n                    if (i < 5) {\n                      itemsRef.current[i + 1].focus();\n                    }\n                  }\n                }}\n                onPaste={(event) => {\n                  const paste = event.clipboardData.getData('text');\n                  const pasteArray = paste.split('');\n\n                  if (pasteArray.length !== 6) {\n                    return;\n                  }\n\n                  let valid = true;\n\n                  pasteArray.forEach((x) => {\n                    if (!Number.isInteger(parseInt(x, 10))) {\n                      valid = false;\n                    }\n                  });\n\n                  if (valid) {\n                    setFieldValue('code', pasteArray);\n                    itemsRef.current[5].focus();\n                  }\n                }}\n                value={values.code[i]}\n                sx={{\n                  display: 'inline-block',\n                  textAlign: 'center',\n                  '& .MuiInputBase-input': {\n                    textAlign: 'center'\n                  }\n                }}\n                variant=\"outlined\"\n              />\n            ))}\n          </Box>\n          {Boolean(Array.isArray(touched.code) && touched.code.length === 6 && errors.code) && (\n            <FormHelperText\n              error\n              sx={{ mx: '14px' }}\n            >\n              {Array.isArray(errors.code) && errors.code.find((x) => x !== undefined)}\n            </FormHelperText>\n          )}\n          <TextField\n            error={Boolean(touched.password && errors.password)}\n            fullWidth\n            helperText={touched.password && errors.password}\n            label=\"Password\"\n            margin=\"normal\"\n            name=\"password\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"password\"\n            value={values.password}\n            variant=\"outlined\"\n          />\n          <TextField\n            error={Boolean(touched.passwordConfirm && errors.passwordConfirm)}\n            fullWidth\n            helperText={touched.passwordConfirm && errors.passwordConfirm}\n            label=\"Password Confirmation\"\n            margin=\"normal\"\n            name=\"passwordConfirm\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"password\"\n            value={values.passwordConfirm}\n            variant=\"outlined\"\n          />\n          {errors.submit && (\n            <Box sx={{ mt: 3 }}>\n              <FormHelperText error>\n                {errors.submit}\n              </FormHelperText>\n            </Box>\n          )}\n          <Box sx={{ mt: 3 }}>\n            <Button\n              color=\"primary\"\n              disabled={isSubmitting}\n              fullWidth\n              size=\"large\"\n              type=\"submit\"\n              variant=\"contained\"\n            >\n              Reset Password\n            </Button>\n          </Box>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nexport default PasswordResetAmplify;\n"]},"metadata":{},"sourceType":"module"}