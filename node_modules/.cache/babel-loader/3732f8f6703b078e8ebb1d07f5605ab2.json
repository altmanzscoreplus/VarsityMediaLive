{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/environment/VarsityMediaLive07042021/src/components/dashboard/chat/ChatThreadItem.js\";\nimport PropTypes from 'prop-types';\nimport { Avatar, AvatarGroup, Box, Chip, ListItem, ListItemAvatar, ListItemText } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getDetails = (thread, currentUserId) => {\n  const otherParticipants = thread.participants.filter(participant => participant.id !== currentUserId);\n  const displayNames = otherParticipants.reduce((names, participant) => [...names, participant.name], []).join(', ');\n  let displayText = '';\n  const lastMessage = thread.messages[thread.messages.length - 1];\n\n  if (lastMessage) {\n    const sender = lastMessage.senderId === currentUserId ? 'Me: ' : '';\n    const message = lastMessage.contentType === 'image' ? 'Sent a photo' : lastMessage.body;\n    displayText = `${sender}${message}`;\n  }\n\n  return {\n    otherParticipants,\n    displayNames,\n    displayText\n  };\n};\n\nconst ChatThreadItem = props => {\n  const {\n    active,\n    thread,\n    onSelect,\n    ...other\n  } = props; // We hardcode the current user ID because the mocked that is not in sync with the auth provider.\n  // When implementing this app with a real database, replace this ID with the ID from Auth Context.\n\n  const details = getDetails(thread, '5e86809283e28b96d2d38537');\n  return /*#__PURE__*/_jsxDEV(ListItem, {\n    button: true,\n    onClick: onSelect,\n    sx: {\n      backgroundColor: active && 'action.selected',\n      boxShadow: theme => active && `inset 4px 0px 0px ${theme.palette.primary.main}`\n    },\n    ...other,\n    children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n      sx: {\n        display: 'flex',\n        justifyContent: {\n          sm: 'flex-start',\n          xs: 'center'\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(AvatarGroup, {\n        max: 2,\n        sx: {\n          '& .MuiAvatar-root': details.otherParticipants.length > 1 ? {\n            height: 26,\n            width: 26,\n            '&:nth-of-type(2)': {\n              mt: '10px'\n            }\n          } : {\n            height: 36,\n            width: 36\n          }\n        },\n        children: details.otherParticipants.map(participant => /*#__PURE__*/_jsxDEV(Avatar, {\n          src: participant.avatar\n        }, participant.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n      primary: details.displayNames,\n      primaryTypographyProps: {\n        color: 'textPrimary',\n        noWrap: true,\n        variant: 'subtitle2'\n      },\n      secondary: details.displayText,\n      secondaryTypographyProps: {\n        color: 'textSecondary',\n        noWrap: true,\n        variant: 'body2'\n      },\n      sx: {\n        display: {\n          sm: 'block',\n          xs: 'none'\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        alignItems: 'flex-end',\n        display: {\n          sm: 'flex',\n          xs: 'none'\n        },\n        flexDirection: 'column',\n        ml: 2\n      },\n      children: thread.unreadCount > 0 && /*#__PURE__*/_jsxDEV(Chip, {\n        color: \"primary\",\n        label: thread.unreadCount,\n        size: \"small\",\n        sx: {\n          height: 18,\n          mt: '2px',\n          minWidth: 18,\n          p: '2px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ChatThreadItem;\nChatThreadItem.propTypes = {\n  active: PropTypes.bool,\n  onSelect: PropTypes.func,\n  thread: PropTypes.object.isRequired\n};\nChatThreadItem.defaultProps = {\n  active: false\n};\nexport default ChatThreadItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatThreadItem\");","map":{"version":3,"sources":["/home/ec2-user/environment/VarsityMediaLive07042021/src/components/dashboard/chat/ChatThreadItem.js"],"names":["PropTypes","Avatar","AvatarGroup","Box","Chip","ListItem","ListItemAvatar","ListItemText","getDetails","thread","currentUserId","otherParticipants","participants","filter","participant","id","displayNames","reduce","names","name","join","displayText","lastMessage","messages","length","sender","senderId","message","contentType","body","ChatThreadItem","props","active","onSelect","other","details","backgroundColor","boxShadow","theme","palette","primary","main","display","justifyContent","sm","xs","height","width","mt","map","avatar","color","noWrap","variant","alignItems","flexDirection","ml","unreadCount","minWidth","p","propTypes","bool","func","object","isRequired","defaultProps"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport {\n  Avatar,\n  AvatarGroup,\n  Box,\n  Chip,\n  ListItem,\n  ListItemAvatar,\n  ListItemText\n} from '@material-ui/core';\n\nconst getDetails = (thread, currentUserId) => {\n  const otherParticipants = thread.participants.filter((participant) => (participant.id\n    !== currentUserId));\n  const displayNames = otherParticipants\n    .reduce((names, participant) => [...names, participant.name], [])\n    .join(', ');\n  let displayText = '';\n  const lastMessage = thread.messages[thread.messages.length - 1];\n\n  if (lastMessage) {\n    const sender = lastMessage.senderId === currentUserId ? 'Me: ' : '';\n    const message = lastMessage.contentType === 'image'\n      ? 'Sent a photo'\n      : lastMessage.body;\n\n    displayText = `${sender}${message}`;\n  }\n\n  return {\n    otherParticipants,\n    displayNames,\n    displayText\n  };\n};\n\nconst ChatThreadItem = (props) => {\n  const { active, thread, onSelect, ...other } = props;\n\n  // We hardcode the current user ID because the mocked that is not in sync with the auth provider.\n  // When implementing this app with a real database, replace this ID with the ID from Auth Context.\n  const details = getDetails(thread, '5e86809283e28b96d2d38537');\n\n  return (\n    <ListItem\n      button\n      onClick={onSelect}\n      sx={{\n        backgroundColor: active && 'action.selected',\n        boxShadow: (theme) => active && `inset 4px 0px 0px ${theme.palette.primary.main}`\n      }}\n      {...other}\n    >\n      <ListItemAvatar\n        sx={{\n          display: 'flex',\n          justifyContent: {\n            sm: 'flex-start',\n            xs: 'center'\n          }\n        }}\n      >\n        <AvatarGroup\n          max={2}\n          sx={{\n            '& .MuiAvatar-root': details.otherParticipants.length > 1\n              ? {\n                height: 26,\n                width: 26,\n                '&:nth-of-type(2)': {\n                  mt: '10px'\n                }\n              }\n              : {\n                height: 36,\n                width: 36\n              }\n          }}\n        >\n          {details.otherParticipants.map((participant) => (\n            <Avatar\n              key={participant.id}\n              src={participant.avatar}\n            />\n          ))}\n        </AvatarGroup>\n      </ListItemAvatar>\n      <ListItemText\n        primary={details.displayNames}\n        primaryTypographyProps={{\n          color: 'textPrimary',\n          noWrap: true,\n          variant: 'subtitle2'\n        }}\n        secondary={details.displayText}\n        secondaryTypographyProps={{\n          color: 'textSecondary',\n          noWrap: true,\n          variant: 'body2'\n        }}\n        sx={{\n          display: {\n            sm: 'block',\n            xs: 'none'\n          }\n        }}\n      />\n      <Box\n        sx={{\n          alignItems: 'flex-end',\n          display: {\n            sm: 'flex',\n            xs: 'none'\n          },\n          flexDirection: 'column',\n          ml: 2\n        }}\n      >\n        {thread.unreadCount > 0 && (\n          <Chip\n            color=\"primary\"\n            label={thread.unreadCount}\n            size=\"small\"\n            sx={{\n              height: 18,\n              mt: '2px',\n              minWidth: 18,\n              p: '2px'\n            }}\n          />\n        )}\n      </Box>\n    </ListItem>\n  );\n};\n\nChatThreadItem.propTypes = {\n  active: PropTypes.bool,\n  onSelect: PropTypes.func,\n  thread: PropTypes.object.isRequired\n};\n\nChatThreadItem.defaultProps = {\n  active: false\n};\n\nexport default ChatThreadItem;\n"]},"metadata":{},"sourceType":"module"}