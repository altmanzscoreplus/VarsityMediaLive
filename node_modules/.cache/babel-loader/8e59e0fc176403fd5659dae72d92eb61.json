{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/environment/VarsityMediaLive07042021/src/components/dashboard/chat/ChatThread.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Box, Divider } from '@material-ui/core';\nimport { addRecipient, getParticipants, getThread, markThreadAsSeen, removeRecipient, resetActiveThread } from '../../../slices/chat';\nimport { useDispatch, useSelector } from '../../../store';\nimport ChatMessageAdd from './ChatMessageAdd';\nimport ChatMessages from './ChatMessages';\nimport ChatThreadComposer from './ChatThreadComposer';\nimport ChatThreadToolbar from './ChatThreadToolbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst threadSelector = state => {\n  const {\n    threads,\n    activeThreadId\n  } = state.chat;\n  const thread = threads.byId[activeThreadId];\n\n  if (thread) {\n    return thread;\n  }\n\n  return {\n    id: null,\n    messages: [],\n    participants: [],\n    unreadMessages: 0\n  };\n};\n\nconst ChatThread = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const {\n    threadKey\n  } = useParams();\n  const {\n    activeThreadId,\n    participants,\n    recipients\n  } = useSelector(state => state.chat);\n  const thread = useSelector(state => threadSelector(state));\n\n  const getDetails = async () => {\n    dispatch(getParticipants(threadKey));\n\n    try {\n      await dispatch(getThread(threadKey));\n    } catch (err) {\n      dispatch(resetActiveThread()); // If thread key is not a valid key (thread id or username)\n      // the server throws an error, this means that the user tried a shady route\n      // and we redirect him on the compose route\n\n      console.error(err);\n      navigate('/dashboard/chat/new');\n    }\n  };\n\n  useEffect(() => {\n    if (threadKey) {\n      getDetails();\n    }\n  }, [threadKey]);\n  useEffect(() => {\n    if (activeThreadId) {\n      dispatch(markThreadAsSeen(activeThreadId));\n    }\n  }, [activeThreadId]); // In our case there two possible routes\n  // one that contains chat/new and one with a chat/:threadKey\n  // if threadKey does not exist, it means that the chat is in compose mode\n\n  const mode = threadKey ? 'DETAIL' : 'COMPOSE';\n\n  const handleAddRecipient = recipient => {\n    dispatch(addRecipient(recipient));\n  };\n\n  const handleRemoveRecipient = recipientId => {\n    dispatch(removeRecipient(recipientId));\n  };\n\n  const handleSendMessage = async () => {\n    try {// Handle send message\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      backgroundColor: 'background.default',\n      display: 'flex',\n      flexDirection: 'column',\n      flexGrow: 1\n    },\n    children: [mode === 'DETAIL' && /*#__PURE__*/_jsxDEV(ChatThreadToolbar, {\n      participants: participants\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), mode === 'COMPOSE' && /*#__PURE__*/_jsxDEV(ChatThreadComposer, {\n      onAddRecipient: handleAddRecipient,\n      onRemoveRecipient: handleRemoveRecipient,\n      recipients: recipients\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flexGrow: 1,\n        overflow: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(ChatMessages, {\n        messages: thread.messages,\n        participants: thread.participants\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatMessageAdd, {\n      disabled: false,\n      onSend: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatThread, \"cAaHxTpka6/UTIgkdT7opLlROus=\", false, function () {\n  return [useDispatch, useNavigate, useParams, useSelector, useSelector];\n});\n\n_c = ChatThread;\nexport default ChatThread;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatThread\");","map":{"version":3,"sources":["/home/ec2-user/environment/VarsityMediaLive07042021/src/components/dashboard/chat/ChatThread.js"],"names":["useEffect","useNavigate","useParams","Box","Divider","addRecipient","getParticipants","getThread","markThreadAsSeen","removeRecipient","resetActiveThread","useDispatch","useSelector","ChatMessageAdd","ChatMessages","ChatThreadComposer","ChatThreadToolbar","threadSelector","state","threads","activeThreadId","chat","thread","byId","id","messages","participants","unreadMessages","ChatThread","dispatch","navigate","threadKey","recipients","getDetails","err","console","error","mode","handleAddRecipient","recipient","handleRemoveRecipient","recipientId","handleSendMessage","backgroundColor","display","flexDirection","flexGrow","overflow"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Box, Divider } from '@material-ui/core';\nimport {\n  addRecipient,\n  getParticipants,\n  getThread,\n  markThreadAsSeen,\n  removeRecipient,\n  resetActiveThread\n} from '../../../slices/chat';\nimport { useDispatch, useSelector } from '../../../store';\nimport ChatMessageAdd from './ChatMessageAdd';\nimport ChatMessages from './ChatMessages';\nimport ChatThreadComposer from './ChatThreadComposer';\nimport ChatThreadToolbar from './ChatThreadToolbar';\n\nconst threadSelector = (state) => {\n  const { threads, activeThreadId } = state.chat;\n  const thread = threads.byId[activeThreadId];\n\n  if (thread) {\n    return thread;\n  }\n\n  return {\n    id: null,\n    messages: [],\n    participants: [],\n    unreadMessages: 0\n  };\n};\n\nconst ChatThread = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { threadKey } = useParams();\n  const { activeThreadId, participants, recipients } = useSelector((state) => state.chat);\n  const thread = useSelector((state) => threadSelector(state));\n\n  const getDetails = async () => {\n    dispatch(getParticipants(threadKey));\n\n    try {\n      await dispatch(getThread(threadKey));\n    } catch (err) {\n      dispatch(resetActiveThread());\n      // If thread key is not a valid key (thread id or username)\n      // the server throws an error, this means that the user tried a shady route\n      // and we redirect him on the compose route\n      console.error(err);\n      navigate('/dashboard/chat/new');\n    }\n  };\n\n  useEffect(() => {\n    if (threadKey) {\n      getDetails();\n    }\n  }, [threadKey]);\n\n  useEffect(() => {\n    if (activeThreadId) {\n      dispatch(markThreadAsSeen(activeThreadId));\n    }\n  }, [activeThreadId]);\n\n  // In our case there two possible routes\n  // one that contains chat/new and one with a chat/:threadKey\n  // if threadKey does not exist, it means that the chat is in compose mode\n  const mode = threadKey ? 'DETAIL' : 'COMPOSE';\n\n  const handleAddRecipient = (recipient) => {\n    dispatch(addRecipient(recipient));\n  };\n\n  const handleRemoveRecipient = (recipientId) => {\n    dispatch(removeRecipient(recipientId));\n  };\n\n  const handleSendMessage = async () => {\n    try {\n      // Handle send message\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <Box\n      sx={{\n        backgroundColor: 'background.default',\n        display: 'flex',\n        flexDirection: 'column',\n        flexGrow: 1\n      }}\n    >\n      {mode === 'DETAIL' && (\n        <ChatThreadToolbar participants={participants} />\n      )}\n      {mode === 'COMPOSE' && (\n        <ChatThreadComposer\n          onAddRecipient={handleAddRecipient}\n          onRemoveRecipient={handleRemoveRecipient}\n          recipients={recipients}\n        />\n      )}\n      <Box\n        sx={{\n          flexGrow: 1,\n          overflow: 'auto'\n        }}\n      >\n        <ChatMessages\n          messages={thread.messages}\n          participants={thread.participants}\n        />\n      </Box>\n      <Divider />\n      <ChatMessageAdd\n        disabled={false}\n        onSend={handleSendMessage}\n      />\n    </Box>\n  );\n};\n\nexport default ChatThread;\n"]},"metadata":{},"sourceType":"module"}