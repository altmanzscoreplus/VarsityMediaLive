{"ast":null,"code":"import { addDays, endOfDay, setHours, setMinutes, startOfDay, subDays } from 'date-fns';\nimport createResourceId from '../utils/createResourceId';\nimport deepCopy from '../utils/deepCopy';\nconst now = new Date();\nlet events = [{\n  id: '5e8882e440f6322fa399eeb8',\n  allDay: false,\n  color: '#43a048',\n  description: 'Inform about new contract',\n  end: setHours(setMinutes(subDays(now, 6), 0), 19).getTime(),\n  start: setHours(setMinutes(subDays(now, 6), 30), 17).getTime(),\n  title: 'Call Samantha'\n}, {\n  id: '5e8882eb5f8ec686220ff131',\n  allDay: false,\n  color: null,\n  description: 'Discuss about new partnership',\n  end: setHours(setMinutes(addDays(now, 2), 30), 15).getTime(),\n  start: setHours(setMinutes(addDays(now, 2), 0), 12).getTime(),\n  title: 'Meet with IBM'\n}, {\n  id: '5e8882f1f0c9216396e05a9b',\n  allDay: false,\n  color: null,\n  description: 'Prepare docs',\n  end: setHours(setMinutes(addDays(now, 5), 0), 12).getTime(),\n  start: setHours(setMinutes(addDays(now, 5), 0), 8).getTime(),\n  title: 'SCRUM Planning'\n}, {\n  id: '5e8882f6daf81eccfa40dee2',\n  allDay: true,\n  color: null,\n  description: 'Meet with team to discuss',\n  end: startOfDay(subDays(now, 11)).getTime(),\n  start: endOfDay(subDays(now, 12)).getTime(),\n  title: 'Begin SEM'\n}, {\n  id: '5e8882fcd525e076b3c1542c',\n  allDay: false,\n  color: '#43a048',\n  description: 'Sorry, John!',\n  end: setHours(setMinutes(addDays(now, 3), 31), 7).getTime(),\n  start: setHours(setMinutes(addDays(now, 3), 30), 7).getTime(),\n  title: 'Fire John'\n}, {\n  id: '5e888302e62149e4b49aa609',\n  allDay: false,\n  color: null,\n  description: 'Discuss about the new project',\n  end: setHours(setMinutes(subDays(now, 6), 30), 9).getTime(),\n  start: setHours(setMinutes(subDays(now, 6), 0), 9).getTime(),\n  title: 'Call Alex'\n}, {\n  id: '5e88830672d089c53c46ece3',\n  allDay: false,\n  color: '#43a048',\n  description: 'Get a new quote for the payment processor',\n  end: setHours(setMinutes(now, 30), 17).getTime(),\n  start: setHours(setMinutes(now, 30), 15).getTime(),\n  title: 'Visit Samantha'\n}];\n\nclass CalendarApi {\n  getEvents() {\n    return Promise.resolve(deepCopy(events));\n  }\n\n  createEvent(data) {\n    return new Promise((resolve, reject) => {\n      try {\n        const {\n          allDay,\n          description,\n          end,\n          start,\n          title\n        } = data; // Make a deep copy\n\n        const clonedEvents = deepCopy(events); // Create the new event\n\n        const event = {\n          id: createResourceId(),\n          allDay,\n          description,\n          end,\n          start,\n          title\n        }; // Add the new event to events\n\n        clonedEvents.push(event); // Save changes\n\n        events = clonedEvents;\n        resolve(deepCopy(event));\n      } catch (err) {\n        console.error('[Calendar Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  updateEvent({\n    eventId,\n    update\n  }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedEvents = deepCopy(events); // Find the event that will be updated\n\n        const event = events.find(_event => _event.id === eventId);\n\n        if (!event) {\n          reject(new Error('Event not found'));\n          return;\n        } // Update the event\n\n\n        Object.assign(event, update); // Save changes\n\n        events = clonedEvents;\n        resolve(deepCopy(event));\n      } catch (err) {\n        console.error('[Calendar Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  deleteEvent(eventId) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedEvents = deepCopy(events); // Find the event that will be removed\n\n        const event = events.find(_event => _event.id === eventId);\n\n        if (!event) {\n          reject(new Error('Event not found'));\n          return;\n        }\n\n        events = events.filter(_event => _event.id !== eventId); // Save changes\n\n        events = clonedEvents;\n        resolve(true);\n      } catch (err) {\n        console.error('[Calendar Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n}\n\nexport const calendarApi = new CalendarApi();","map":{"version":3,"sources":["/home/ec2-user/environment/VarsityMediaLive07042021/src/__fakeApi__/calendarApi.js"],"names":["addDays","endOfDay","setHours","setMinutes","startOfDay","subDays","createResourceId","deepCopy","now","Date","events","id","allDay","color","description","end","getTime","start","title","CalendarApi","getEvents","Promise","resolve","createEvent","data","reject","clonedEvents","event","push","err","console","error","Error","updateEvent","eventId","update","find","_event","Object","assign","deleteEvent","filter","calendarApi"],"mappings":"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","sourcesContent":["import { addDays, endOfDay, setHours, setMinutes, startOfDay, subDays } from 'date-fns';\nimport createResourceId from '../utils/createResourceId';\nimport deepCopy from '../utils/deepCopy';\n\nconst now = new Date();\n\nlet events = [\n  {\n    id: '5e8882e440f6322fa399eeb8',\n    allDay: false,\n    color: '#43a048',\n    description: 'Inform about new contract',\n    end: setHours(setMinutes(subDays(now, 6), 0), 19).getTime(),\n    start: setHours(setMinutes(subDays(now, 6), 30), 17).getTime(),\n    title: 'Call Samantha'\n  },\n  {\n    id: '5e8882eb5f8ec686220ff131',\n    allDay: false,\n    color: null,\n    description: 'Discuss about new partnership',\n    end: setHours(setMinutes(addDays(now, 2), 30), 15).getTime(),\n    start: setHours(setMinutes(addDays(now, 2), 0), 12).getTime(),\n    title: 'Meet with IBM'\n  },\n  {\n    id: '5e8882f1f0c9216396e05a9b',\n    allDay: false,\n    color: null,\n    description: 'Prepare docs',\n    end: setHours(setMinutes(addDays(now, 5), 0), 12).getTime(),\n    start: setHours(setMinutes(addDays(now, 5), 0), 8).getTime(),\n    title: 'SCRUM Planning'\n  },\n  {\n    id: '5e8882f6daf81eccfa40dee2',\n    allDay: true,\n    color: null,\n    description: 'Meet with team to discuss',\n    end: startOfDay(subDays(now, 11)).getTime(),\n    start: endOfDay(subDays(now, 12)).getTime(),\n    title: 'Begin SEM'\n  },\n  {\n    id: '5e8882fcd525e076b3c1542c',\n    allDay: false,\n    color: '#43a048',\n    description: 'Sorry, John!',\n    end: setHours(setMinutes(addDays(now, 3), 31), 7).getTime(),\n    start: setHours(setMinutes(addDays(now, 3), 30), 7).getTime(),\n    title: 'Fire John'\n  },\n  {\n    id: '5e888302e62149e4b49aa609',\n    allDay: false,\n    color: null,\n    description: 'Discuss about the new project',\n    end: setHours(setMinutes(subDays(now, 6), 30), 9).getTime(),\n    start: setHours(setMinutes(subDays(now, 6), 0), 9).getTime(),\n    title: 'Call Alex'\n  },\n  {\n    id: '5e88830672d089c53c46ece3',\n    allDay: false,\n    color: '#43a048',\n    description: 'Get a new quote for the payment processor',\n    end: setHours(setMinutes(now, 30), 17).getTime(),\n    start: setHours(setMinutes(now, 30), 15).getTime(),\n    title: 'Visit Samantha'\n  }\n];\n\nclass CalendarApi {\n  getEvents() {\n    return Promise.resolve(deepCopy(events));\n  }\n\n  createEvent(data) {\n    return new Promise((resolve, reject) => {\n      try {\n        const { allDay, description, end, start, title } = data;\n\n        // Make a deep copy\n        const clonedEvents = deepCopy(events);\n\n        // Create the new event\n        const event = {\n          id: createResourceId(),\n          allDay,\n          description,\n          end,\n          start,\n          title\n        };\n\n        // Add the new event to events\n        clonedEvents.push(event);\n\n        // Save changes\n        events = clonedEvents;\n\n        resolve(deepCopy(event));\n      } catch (err) {\n        console.error('[Calendar Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  updateEvent({ eventId, update }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedEvents = deepCopy(events);\n\n        // Find the event that will be updated\n        const event = events.find((_event) => _event.id === eventId);\n\n        if (!event) {\n          reject(new Error('Event not found'));\n          return;\n        }\n\n        // Update the event\n        Object.assign(event, update);\n\n        // Save changes\n        events = clonedEvents;\n\n        resolve(deepCopy(event));\n      } catch (err) {\n        console.error('[Calendar Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  deleteEvent(eventId) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedEvents = deepCopy(events);\n\n        // Find the event that will be removed\n        const event = events.find((_event) => _event.id === eventId);\n\n        if (!event) {\n          reject(new Error('Event not found'));\n          return;\n        }\n\n        events = events.filter((_event) => _event.id !== eventId);\n\n        // Save changes\n        events = clonedEvents;\n\n        resolve(true);\n      } catch (err) {\n        console.error('[Calendar Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n}\n\nexport const calendarApi = new CalendarApi();\n"]},"metadata":{},"sourceType":"module"}