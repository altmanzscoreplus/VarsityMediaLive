{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/environment/VarsityMediaLive07042021/src/components/dashboard/order/OrderListTable.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { format } from 'date-fns';\nimport numeral from 'numeral';\nimport PropTypes from 'prop-types';\nimport { Box, Card, CardHeader, Checkbox, Divider, IconButton, Link, Table, TableBody, TableCell, TableHead, TablePagination, TableRow, Typography } from '@material-ui/core';\nimport ArrowRightIcon from '../../../icons/ArrowRight';\nimport PencilAltIcon from '../../../icons/PencilAlt';\nimport Label from '../../Label';\nimport MoreMenu from '../../MoreMenu';\nimport Scrollbar from '../../Scrollbar';\nimport OrderListBulkActions from './OrderListBulkActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getStatusLabel = paymentStatus => {\n  const map = {\n    canceled: {\n      color: 'error',\n      text: 'Canceled'\n    },\n    completed: {\n      color: 'success',\n      text: 'Completed'\n    },\n    pending: {\n      color: 'warning',\n      text: 'Pending'\n    },\n    rejected: {\n      color: 'error',\n      text: 'Rejected'\n    }\n  };\n  const {\n    text,\n    color\n  } = map[paymentStatus];\n  return /*#__PURE__*/_jsxDEV(Label, {\n    color: color,\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\nconst applyPagination = (orders, page, limit) => orders.slice(page * limit, page * limit + limit);\n\nconst OrderListTable = props => {\n  _s();\n\n  const {\n    orders,\n    ...other\n  } = props;\n  const [selectedOrders, setSelectedOrders] = useState([]);\n  const [page, setPage] = useState(0);\n  const [limit, setLimit] = useState(5);\n\n  const handleSelectAllOrders = event => {\n    setSelectedOrders(event.target.checked ? orders.map(order => order.id) : []);\n  };\n\n  const handleSelectOneOrder = (event, orderId) => {\n    if (!selectedOrders.includes(orderId)) {\n      setSelectedOrders(prevSelected => [...prevSelected, orderId]);\n    } else {\n      setSelectedOrders(prevSelected => prevSelected.filter(id => id !== orderId));\n    }\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleLimitChange = event => {\n    setLimit(parseInt(event.target.value, 10));\n  };\n\n  const paginatedOrders = applyPagination(orders, page, limit);\n  const enableBulkActions = selectedOrders.length > 0;\n  const selectedSomeOrders = selectedOrders.length > 0 && selectedOrders.length < orders.length;\n  const selectedAllOrders = selectedOrders.length === orders.length;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Card, { ...other,\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        action: /*#__PURE__*/_jsxDEV(MoreMenu, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 19\n        }, this),\n        title: \"Orders\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Scrollbar, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            minWidth: 1150\n          },\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  padding: \"checkbox\",\n                  children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                    checked: selectedAllOrders,\n                    color: \"primary\",\n                    indeterminate: selectedSomeOrders,\n                    onChange: handleSelectAllOrders\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 108,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 107,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Number\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Customer\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Method\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Total\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Actions\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: paginatedOrders.map(order => {\n                const isOrderSelected = selectedOrders.includes(order.id);\n                return /*#__PURE__*/_jsxDEV(TableRow, {\n                  hover: true,\n                  selected: selectedOrders.indexOf(order.id) !== -1,\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    padding: \"checkbox\",\n                    children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      checked: isOrderSelected,\n                      color: \"primary\",\n                      onChange: event => handleSelectOneOrder(event, order.id),\n                      value: isOrderSelected\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 146,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 145,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: [/*#__PURE__*/_jsxDEV(Link, {\n                      color: \"textPrimary\",\n                      component: RouterLink,\n                      to: \"/dashboard/orders/1\",\n                      underline: \"none\",\n                      variant: \"subtitle2\",\n                      children: order.number\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 154,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                      color: \"textSecondary\",\n                      variant: \"body2\",\n                      children: format(order.createdAt, 'dd MMM yyyy | HH:mm')\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 163,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 153,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      color: \"textPrimary\",\n                      variant: \"subtitle2\",\n                      children: order.customer.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 171,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                      color: \"textSecondary\",\n                      variant: \"body2\",\n                      children: order.customer.email\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 177,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 170,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: order.paymentMethod\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 184,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: numeral(order.totalAmount).format(`${order.currency}0,0.00`)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 187,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: getStatusLabel(order.status)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 190,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                      children: /*#__PURE__*/_jsxDEV(PencilAltIcon, {\n                        fontSize: \"small\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 195,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 194,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                      component: RouterLink,\n                      to: \"/dashboard/orders/1\",\n                      children: /*#__PURE__*/_jsxDEV(ArrowRightIcon, {\n                        fontSize: \"small\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 201,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 197,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 193,\n                    columnNumber: 23\n                  }, this)]\n                }, order.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n        component: \"div\",\n        count: orders.length,\n        onPageChange: handlePageChange,\n        onRowsPerPageChange: handleLimitChange,\n        page: page,\n        rowsPerPage: limit,\n        rowsPerPageOptions: [5, 10, 25]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OrderListBulkActions, {\n      open: enableBulkActions,\n      selected: selectedOrders\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(OrderListTable, \"zbA8WVRo40K2fc2Iu3fttMhpuE4=\");\n\n_c = OrderListTable;\nOrderListTable.propTypes = {\n  orders: PropTypes.array.isRequired\n};\nexport default OrderListTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrderListTable\");","map":{"version":3,"sources":["/home/ec2-user/environment/VarsityMediaLive07042021/src/components/dashboard/order/OrderListTable.js"],"names":["useState","Link","RouterLink","format","numeral","PropTypes","Box","Card","CardHeader","Checkbox","Divider","IconButton","Table","TableBody","TableCell","TableHead","TablePagination","TableRow","Typography","ArrowRightIcon","PencilAltIcon","Label","MoreMenu","Scrollbar","OrderListBulkActions","getStatusLabel","paymentStatus","map","canceled","color","text","completed","pending","rejected","applyPagination","orders","page","limit","slice","OrderListTable","props","other","selectedOrders","setSelectedOrders","setPage","setLimit","handleSelectAllOrders","event","target","checked","order","id","handleSelectOneOrder","orderId","includes","prevSelected","filter","handlePageChange","newPage","handleLimitChange","parseInt","value","paginatedOrders","enableBulkActions","length","selectedSomeOrders","selectedAllOrders","minWidth","isOrderSelected","indexOf","number","createdAt","customer","name","email","paymentMethod","totalAmount","currency","status","propTypes","array","isRequired"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { format } from 'date-fns';\nimport numeral from 'numeral';\nimport PropTypes from 'prop-types';\nimport {\n  Box,\n  Card,\n  CardHeader,\n  Checkbox,\n  Divider,\n  IconButton,\n  Link,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Typography\n} from '@material-ui/core';\nimport ArrowRightIcon from '../../../icons/ArrowRight';\nimport PencilAltIcon from '../../../icons/PencilAlt';\nimport Label from '../../Label';\nimport MoreMenu from '../../MoreMenu';\nimport Scrollbar from '../../Scrollbar';\nimport OrderListBulkActions from './OrderListBulkActions';\n\nconst getStatusLabel = (paymentStatus) => {\n  const map = {\n    canceled: {\n      color: 'error',\n      text: 'Canceled'\n    },\n    completed: {\n      color: 'success',\n      text: 'Completed'\n    },\n    pending: {\n      color: 'warning',\n      text: 'Pending'\n    },\n    rejected: {\n      color: 'error',\n      text: 'Rejected'\n    }\n  };\n\n  const { text, color } = map[paymentStatus];\n\n  return (\n    <Label color={color}>\n      {text}\n    </Label>\n  );\n};\n\nconst applyPagination = (orders, page, limit) => orders\n  .slice(page * limit, page * limit + limit);\n\nconst OrderListTable = (props) => {\n  const { orders, ...other } = props;\n  const [selectedOrders, setSelectedOrders] = useState([]);\n  const [page, setPage] = useState(0);\n  const [limit, setLimit] = useState(5);\n\n  const handleSelectAllOrders = (event) => {\n    setSelectedOrders(event.target.checked\n      ? orders.map((order) => order.id)\n      : []);\n  };\n\n  const handleSelectOneOrder = (event, orderId) => {\n    if (!selectedOrders.includes(orderId)) {\n      setSelectedOrders((prevSelected) => [...prevSelected, orderId]);\n    } else {\n      setSelectedOrders((prevSelected) => prevSelected.filter((id) => id !== orderId));\n    }\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleLimitChange = (event) => {\n    setLimit(parseInt(event.target.value, 10));\n  };\n\n  const paginatedOrders = applyPagination(orders, page, limit);\n  const enableBulkActions = selectedOrders.length > 0;\n  const selectedSomeOrders = selectedOrders.length > 0 && selectedOrders.length < orders.length;\n  const selectedAllOrders = selectedOrders.length === orders.length;\n\n  return (\n    <>\n      <Card {...other}>\n        <CardHeader\n          action={<MoreMenu />}\n          title=\"Orders\"\n        />\n        <Divider />\n        <Scrollbar>\n          <Box sx={{ minWidth: 1150 }}>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell padding=\"checkbox\">\n                    <Checkbox\n                      checked={selectedAllOrders}\n                      color=\"primary\"\n                      indeterminate={selectedSomeOrders}\n                      onChange={handleSelectAllOrders}\n                    />\n                  </TableCell>\n                  <TableCell>\n                    Number\n                  </TableCell>\n                  <TableCell>\n                    Customer\n                  </TableCell>\n                  <TableCell>\n                    Method\n                  </TableCell>\n                  <TableCell>\n                    Total\n                  </TableCell>\n                  <TableCell>\n                    Status\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    Actions\n                  </TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {paginatedOrders.map((order) => {\n                  const isOrderSelected = selectedOrders.includes(order.id);\n\n                  return (\n                    <TableRow\n                      hover\n                      key={order.id}\n                      selected={selectedOrders.indexOf(order.id) !== -1}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          checked={isOrderSelected}\n                          color=\"primary\"\n                          onChange={(event) => handleSelectOneOrder(event, order.id)}\n                          value={isOrderSelected}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Link\n                          color=\"textPrimary\"\n                          component={RouterLink}\n                          to=\"/dashboard/orders/1\"\n                          underline=\"none\"\n                          variant=\"subtitle2\"\n                        >\n                          {order.number}\n                        </Link>\n                        <Typography\n                          color=\"textSecondary\"\n                          variant=\"body2\"\n                        >\n                          {format(order.createdAt, 'dd MMM yyyy | HH:mm')}\n                        </Typography>\n                      </TableCell>\n                      <TableCell>\n                        <Typography\n                          color=\"textPrimary\"\n                          variant=\"subtitle2\"\n                        >\n                          {order.customer.name}\n                        </Typography>\n                        <Typography\n                          color=\"textSecondary\"\n                          variant=\"body2\"\n                        >\n                          {order.customer.email}\n                        </Typography>\n                      </TableCell>\n                      <TableCell>\n                        {order.paymentMethod}\n                      </TableCell>\n                      <TableCell>\n                        {numeral(order.totalAmount).format(`${order.currency}0,0.00`)}\n                      </TableCell>\n                      <TableCell>\n                        {getStatusLabel(order.status)}\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        <IconButton>\n                          <PencilAltIcon fontSize=\"small\" />\n                        </IconButton>\n                        <IconButton\n                          component={RouterLink}\n                          to=\"/dashboard/orders/1\"\n                        >\n                          <ArrowRightIcon fontSize=\"small\" />\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </Box>\n        </Scrollbar>\n        <TablePagination\n          component=\"div\"\n          count={orders.length}\n          onPageChange={handlePageChange}\n          onRowsPerPageChange={handleLimitChange}\n          page={page}\n          rowsPerPage={limit}\n          rowsPerPageOptions={[5, 10, 25]}\n        />\n      </Card>\n      <OrderListBulkActions\n        open={enableBulkActions}\n        selected={selectedOrders}\n      />\n    </>\n  );\n};\n\nOrderListTable.propTypes = {\n  orders: PropTypes.array.isRequired\n};\n\nexport default OrderListTable;\n"]},"metadata":{},"sourceType":"module"}