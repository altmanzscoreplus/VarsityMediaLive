{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/environment/VarsityMediaLive07042021/src/components/MultiSelect.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Checkbox, FormControlLabel, Menu, MenuItem } from '@material-ui/core';\nimport ChevronDownIcon from '../icons/ChevronDown';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MultiSelect = props => {\n  _s();\n\n  const {\n    label,\n    onChange,\n    options,\n    value,\n    ...other\n  } = props;\n  const anchorRef = useRef(null);\n  const [openMenu, setOpenMenu] = useState(false);\n\n  const handleMenuOpen = () => {\n    setOpenMenu(true);\n  };\n\n  const handleMenuClose = () => {\n    setOpenMenu(false);\n  };\n\n  const handleOptionToggle = event => {\n    let newValue = [...value];\n\n    if (event.target.checked) {\n      newValue.push(event.target.value);\n    } else {\n      newValue = newValue.filter(item => item !== event.target.value);\n    }\n\n    if (onChange) {\n      onChange(newValue);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      color: \"inherit\",\n      endIcon: /*#__PURE__*/_jsxDEV(ChevronDownIcon, {\n        fontSize: \"small\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 18\n      }, this),\n      onClick: handleMenuOpen,\n      ref: anchorRef,\n      variant: \"text\",\n      ...other,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Menu, {\n      anchorEl: anchorRef.current,\n      elevation: 1,\n      onClose: handleMenuClose,\n      open: openMenu,\n      PaperProps: {\n        style: {\n          width: 250\n        }\n      },\n      children: options.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n        children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Checkbox, {\n            checked: value.indexOf(option) > -1,\n            color: \"primary\",\n            onChange: handleOptionToggle,\n            value: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 17\n          }, this),\n          label: option\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)\n      }, option, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MultiSelect, \"pfW25jFk+JUo8KFdaPIcnSsSs6w=\");\n\n_c = MultiSelect;\nMultiSelect.propTypes = {\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  options: PropTypes.array.isRequired,\n  value: PropTypes.array.isRequired\n};\nexport default MultiSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiSelect\");","map":{"version":3,"sources":["/home/ec2-user/environment/VarsityMediaLive07042021/src/components/MultiSelect.js"],"names":["useRef","useState","PropTypes","Button","Checkbox","FormControlLabel","Menu","MenuItem","ChevronDownIcon","MultiSelect","props","label","onChange","options","value","other","anchorRef","openMenu","setOpenMenu","handleMenuOpen","handleMenuClose","handleOptionToggle","event","newValue","target","checked","push","filter","item","current","style","width","map","option","indexOf","propTypes","string","isRequired","func","array"],"mappings":"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","sourcesContent":["import { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Checkbox, FormControlLabel, Menu, MenuItem } from '@material-ui/core';\nimport ChevronDownIcon from '../icons/ChevronDown';\n\nconst MultiSelect = (props) => {\n  const { label, onChange, options, value, ...other } = props;\n  const anchorRef = useRef(null);\n  const [openMenu, setOpenMenu] = useState(false);\n\n  const handleMenuOpen = () => {\n    setOpenMenu(true);\n  };\n\n  const handleMenuClose = () => {\n    setOpenMenu(false);\n  };\n\n  const handleOptionToggle = (event) => {\n    let newValue = [...value];\n\n    if (event.target.checked) {\n      newValue.push(event.target.value);\n    } else {\n      newValue = newValue.filter((item) => item !== event.target.value);\n    }\n\n    if (onChange) {\n      onChange(newValue);\n    }\n  };\n\n  return (\n    <>\n      <Button\n        color=\"inherit\"\n        endIcon={<ChevronDownIcon fontSize=\"small\" />}\n        onClick={handleMenuOpen}\n        ref={anchorRef}\n        variant=\"text\"\n        {...other}\n      >\n        {label}\n      </Button>\n      <Menu\n        anchorEl={anchorRef.current}\n        elevation={1}\n        onClose={handleMenuClose}\n        open={openMenu}\n        PaperProps={{ style: { width: 250 } }}\n      >\n        {options.map((option) => (\n          <MenuItem key={option}>\n            <FormControlLabel\n              control={(\n                <Checkbox\n                  checked={value.indexOf(option) > -1}\n                  color=\"primary\"\n                  onChange={handleOptionToggle}\n                  value={option}\n                />\n              )}\n              label={option}\n            />\n          </MenuItem>\n        ))}\n      </Menu>\n    </>\n  );\n};\n\nMultiSelect.propTypes = {\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  options: PropTypes.array.isRequired,\n  value: PropTypes.array.isRequired\n};\n\nexport default MultiSelect;\n"]},"metadata":{},"sourceType":"module"}