{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/environment/VarsityMediaLive07042021/src/components/dashboard/chat/ChatMessages.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Box } from '@material-ui/core';\nimport useAuth from '../../../hooks/useAuth';\nimport Scrollbar from '../../Scrollbar';\nimport ChatMessage from './ChatMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatMessages = props => {\n  _s();\n\n  const {\n    messages,\n    participants,\n    ...other\n  } = props;\n  const rootRef = useRef(null);\n  const {\n    user\n  } = useAuth();\n\n  const scrollToBottom = () => {\n    var _rootRef$current;\n\n    // eslint-disable-next-line no-underscore-dangle\n    if (rootRef === null || rootRef === void 0 ? void 0 : (_rootRef$current = rootRef.current) === null || _rootRef$current === void 0 ? void 0 : _rootRef$current._container) {\n      // eslint-disable-next-line no-underscore-dangle\n      rootRef.current._container.scrollTop = rootRef.current._container.scrollHeight;\n    }\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, scrollToBottom]);\n  return /*#__PURE__*/_jsxDEV(Scrollbar, {\n    options: {\n      suppressScrollX: true\n    },\n    ref: rootRef,\n    ...other,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 2\n      },\n      children: messages.map(message => {\n        const participant = participants.find(_participant => _participant.id === message.senderId);\n        let senderAvatar;\n        let senderName;\n        let senderType; // Since chat mock db is not synced with external auth providers\n        // we set the user details from user auth state instead of thread participants\n\n        if (message.senderId === '5e86809283e28b96d2d38537') {\n          senderAvatar = user.avatar;\n          senderName = 'Me';\n          senderType = 'user';\n        } else {\n          senderAvatar = participant.avatar;\n          senderName = participant.name;\n          senderType = 'contact';\n        }\n\n        return /*#__PURE__*/_jsxDEV(ChatMessage, {\n          body: message.body,\n          contentType: message.contentType,\n          createdAt: message.createdAt,\n          senderAvatar: senderAvatar,\n          senderName: senderName,\n          senderType: senderType\n        }, message.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatMessages, \"ueMZEUVOF0dSshknyneg6EgF1Uw=\", false, function () {\n  return [useAuth];\n});\n\n_c = ChatMessages;\nChatMessages.propTypes = {\n  messages: PropTypes.array,\n  participants: PropTypes.array\n};\nexport default ChatMessages;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatMessages\");","map":{"version":3,"sources":["/home/ec2-user/environment/VarsityMediaLive07042021/src/components/dashboard/chat/ChatMessages.js"],"names":["useEffect","useRef","PropTypes","Box","useAuth","Scrollbar","ChatMessage","ChatMessages","props","messages","participants","other","rootRef","user","scrollToBottom","current","_container","scrollTop","scrollHeight","suppressScrollX","p","map","message","participant","find","_participant","id","senderId","senderAvatar","senderName","senderType","avatar","name","body","contentType","createdAt","propTypes","array"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,GAAT,QAAoB,mBAApB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0B,OAAGC;AAA7B,MAAuCH,KAA7C;AACA,QAAMI,OAAO,GAAGX,MAAM,CAAC,IAAD,CAAtB;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAWT,OAAO,EAAxB;;AAEA,QAAMU,cAAc,GAAG,MAAM;AAAA;;AAC3B;AACA,QAAIF,OAAJ,aAAIA,OAAJ,2CAAIA,OAAO,CAAEG,OAAb,qDAAI,iBAAkBC,UAAtB,EAAkC;AAChC;AACAJ,MAAAA,OAAO,CAACG,OAAR,CAAgBC,UAAhB,CAA2BC,SAA3B,GAAuCL,OAAO,CAACG,OAAR,CAAgBC,UAAhB,CAA2BE,YAAlE;AACD;AACF,GAND;;AAQAlB,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,cAAc;AACf,GAFQ,EAEN,CAACL,QAAD,EAAWK,cAAX,CAFM,CAAT;AAIA,sBACE,QAAC,SAAD;AACE,IAAA,OAAO,EAAE;AAAEK,MAAAA,eAAe,EAAE;AAAnB,KADX;AAEE,IAAA,GAAG,EAAEP,OAFP;AAAA,OAGMD,KAHN;AAAA,2BAKE,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE;AAAES,QAAAA,CAAC,EAAE;AAAL,OAAT;AAAA,gBACGX,QAAQ,CAACY,GAAT,CAAcC,OAAD,IAAa;AACzB,cAAMC,WAAW,GAAGb,YAAY,CAC7Bc,IADiB,CACXC,YAAD,IAAkBA,YAAY,CAACC,EAAb,KAAoBJ,OAAO,CAACK,QADlC,CAApB;AAEA,YAAIC,YAAJ;AACA,YAAIC,UAAJ;AACA,YAAIC,UAAJ,CALyB,CAOzB;AACA;;AACA,YAAIR,OAAO,CAACK,QAAR,KAAqB,0BAAzB,EAAqD;AACnDC,UAAAA,YAAY,GAAGf,IAAI,CAACkB,MAApB;AACAF,UAAAA,UAAU,GAAG,IAAb;AACAC,UAAAA,UAAU,GAAG,MAAb;AACD,SAJD,MAIO;AACLF,UAAAA,YAAY,GAAGL,WAAW,CAACQ,MAA3B;AACAF,UAAAA,UAAU,GAAGN,WAAW,CAACS,IAAzB;AACAF,UAAAA,UAAU,GAAG,SAAb;AACD;;AAED,4BACE,QAAC,WAAD;AACE,UAAA,IAAI,EAAER,OAAO,CAACW,IADhB;AAEE,UAAA,WAAW,EAAEX,OAAO,CAACY,WAFvB;AAGE,UAAA,SAAS,EAAEZ,OAAO,CAACa,SAHrB;AAKE,UAAA,YAAY,EAAEP,YALhB;AAME,UAAA,UAAU,EAAEC,UANd;AAOE,UAAA,UAAU,EAAEC;AAPd,WAIOR,OAAO,CAACI,EAJf;AAAA;AAAA;AAAA;AAAA,gBADF;AAWD,OA9BA;AADH;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,UADF;AAyCD,CA1DD;;GAAMnB,Y;UAGaH,O;;;KAHbG,Y;AA4DNA,YAAY,CAAC6B,SAAb,GAAyB;AACvB3B,EAAAA,QAAQ,EAAEP,SAAS,CAACmC,KADG;AAEvB3B,EAAAA,YAAY,EAAER,SAAS,CAACmC;AAFD,CAAzB;AAKA,eAAe9B,YAAf","sourcesContent":["import { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Box } from '@material-ui/core';\nimport useAuth from '../../../hooks/useAuth';\nimport Scrollbar from '../../Scrollbar';\nimport ChatMessage from './ChatMessage';\n\nconst ChatMessages = (props) => {\n  const { messages, participants, ...other } = props;\n  const rootRef = useRef(null);\n  const { user } = useAuth();\n\n  const scrollToBottom = () => {\n    // eslint-disable-next-line no-underscore-dangle\n    if (rootRef?.current?._container) {\n      // eslint-disable-next-line no-underscore-dangle\n      rootRef.current._container.scrollTop = rootRef.current._container.scrollHeight;\n    }\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, scrollToBottom]);\n\n  return (\n    <Scrollbar\n      options={{ suppressScrollX: true }}\n      ref={rootRef}\n      {...other}\n    >\n      <Box sx={{ p: 2 }}>\n        {messages.map((message) => {\n          const participant = participants\n            .find((_participant) => _participant.id === message.senderId);\n          let senderAvatar;\n          let senderName;\n          let senderType;\n\n          // Since chat mock db is not synced with external auth providers\n          // we set the user details from user auth state instead of thread participants\n          if (message.senderId === '5e86809283e28b96d2d38537') {\n            senderAvatar = user.avatar;\n            senderName = 'Me';\n            senderType = 'user';\n          } else {\n            senderAvatar = participant.avatar;\n            senderName = participant.name;\n            senderType = 'contact';\n          }\n\n          return (\n            <ChatMessage\n              body={message.body}\n              contentType={message.contentType}\n              createdAt={message.createdAt}\n              key={message.id}\n              senderAvatar={senderAvatar}\n              senderName={senderName}\n              senderType={senderType}\n            />\n          );\n        })}\n      </Box>\n    </Scrollbar>\n  );\n};\n\nChatMessages.propTypes = {\n  messages: PropTypes.array,\n  participants: PropTypes.array\n};\n\nexport default ChatMessages;\n"]},"metadata":{},"sourceType":"module"}