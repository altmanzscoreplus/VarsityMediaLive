{"ast":null,"code":"import { subDays, addDays } from 'date-fns';\nimport createResourceId from '../utils/createResourceId';\nimport deepCopy from '../utils/deepCopy'; // You'll see here that we start with a deep clone of the board.\n// The reason for that is to create a db session wannabe strategy.\n// If something fails, we do not affect the original data until everything worked as expected.\n\nconst now = new Date();\nlet board = {\n  cards: [{\n    id: '5e849c8708bd72683b454747',\n    attachments: [],\n    checklists: [{\n      id: '5e84a8175c48d3f5b1d01972',\n      name: 'Update overview page',\n      checkItems: [{\n        id: '5e85af37da584c5e4bd8a06c',\n        name: 'An item',\n        state: 'complete'\n      }]\n    }],\n    comments: [{\n      id: '15e849c5a35d4dff4f88ebff6',\n      cardId: '5e849c8708bd72683b454747',\n      createdAt: subDays(now, 5).getTime(),\n      memberId: '5e887ac47eed253091be10cb',\n      message: 'This is a comment'\n    }],\n    cover: '/static/mock-images/projects/project_3.png',\n    description: 'Duis condimentum lacus finibus felis pellentesque, ac auctor nibh fermentum. Duis sed dui ante. Phasellus id eros tincidunt, dictum lorem vitae, pellentesque sem. Aenean eu enim sit amet mauris rhoncus mollis. Sed enim turpis, porta a felis et, luctus faucibus nisi. Phasellus et metus fermentum, ultrices arcu aliquam, facilisis justo. Cras nunc nunc, elementum sed euismod ut, maximus eget nibh. Phasellus condimentum lorem neque. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Fusce sagittis pharetra eleifend. Suspendisse potenti.',\n    due: addDays(now, 7).getTime(),\n    isSubscribed: false,\n    columnId: '5e849c39325dc5ef58e5a5db',\n    memberIds: ['5e86809283e28b96d2d38537'],\n    name: 'Call with sales of HubSpot'\n  }, {\n    id: '5e849c90fabe1f1f4b3557f6',\n    attachments: [],\n    checklists: [],\n    comments: [],\n    cover: null,\n    description: 'We are looking for vue experience and of course node js strong knowledge',\n    due: addDays(now, 6).getTime(),\n    isSubscribed: true,\n    columnId: '5e849c39325dc5ef58e5a5db',\n    memberIds: ['5e887b209c28ac3dd97f6db5', '5e887a62195cc5aef7e8ca5d'],\n    name: 'Interview for the Asis. Sales Manager'\n  }, {\n    id: '5e849c977ef6265938bfd90b',\n    attachments: [],\n    checklists: [],\n    comments: [],\n    cover: null,\n    description: 'We need to make it aggressive with pricing because it’s in their interest to acquire us',\n    due: null,\n    isSubscribed: false,\n    columnId: '5e849c39325dc5ef58e5a5db',\n    memberIds: [],\n    name: 'Change the height of the top bar because it looks too chunky'\n  }, {\n    id: '5e849c9e34ee93bc7255c599',\n    attachments: [],\n    checklists: [],\n    comments: [],\n    cover: null,\n    description: 'We need to make it aggressive with pricing because it’s in their interest to acquire us',\n    due: null,\n    isSubscribed: false,\n    columnId: '5e849c39325dc5ef58e5a5db',\n    memberIds: ['5e887ac47eed253091be10cb', '5e86809283e28b96d2d38537'],\n    name: 'Integrate Stripe API'\n  }, {\n    id: '5e849ca7d063dc3830d4b49c',\n    attachments: [],\n    checklists: [],\n    comments: [],\n    cover: null,\n    description: 'We need to make it aggressive with pricing because it’s in their interest to acquire us',\n    due: null,\n    isSubscribed: true,\n    columnId: '5e849c2b38d238c33e516755',\n    memberIds: ['5e887a62195cc5aef7e8ca5d'],\n    name: 'Update the customer API for payments'\n  }, {\n    id: '5e849cb5d0c6e8894451fdfa',\n    attachments: [],\n    checklists: [],\n    comments: [],\n    cover: null,\n    description: 'We need to make it aggressive with pricing because it’s in their interest to acquire us',\n    due: null,\n    isSubscribed: true,\n    columnId: '5e849c2b38d238c33e516755',\n    memberIds: [],\n    name: 'Redesign the landing page'\n  }],\n  columns: [{\n    id: '5e849c39325dc5ef58e5a5db',\n    name: 'Todo',\n    cardIds: ['5e849c8708bd72683b454747', '5e849c90fabe1f1f4b3557f6', '5e849c977ef6265938bfd90b', '5e849c9e34ee93bc7255c599']\n  }, {\n    id: '5e849c2b38d238c33e516755',\n    name: 'Progress',\n    cardIds: ['5e849ca7d063dc3830d4b49c', '5e849cb5d0c6e8894451fdfa']\n  }, {\n    id: '5e849c2b38d238c33e5146755',\n    name: 'Done',\n    cardIds: []\n  }],\n  members: [{\n    id: '5e887a62195cc5aef7e8ca5d',\n    avatar: '/static/mock-images/avatars/avatar-marcus_finn.png',\n    name: 'Marcus Finn'\n  }, {\n    id: '5e887ac47eed253091be10cb',\n    avatar: '/static/mock-images/avatars/avatar-carson_darrin.png',\n    name: 'Carson Darrin'\n  }, {\n    id: '5e887b209c28ac3dd97f6db5',\n    avatar: '/static/mock-images/avatars/avatar-fran_perez.png',\n    name: 'Fran Perez'\n  }, {\n    id: '5e887b7602bdbc4dbb234b27',\n    avatar: '/static/mock-images/avatars/avatar-jie_yan_song.png',\n    name: 'Jie Yan Song'\n  }, {\n    id: '5e86809283e28b96d2d38537',\n    avatar: '/static/mock-images/avatars/avatar-jane_rotanson.png',\n    name: 'Jane Rotanson'\n  }]\n};\n\nclass KanbanApi {\n  getBoard() {\n    return Promise.resolve(deepCopy(board));\n  }\n\n  createColumn({\n    name\n  }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board); // Create the new column\n\n        const column = {\n          id: createResourceId(),\n          name,\n          cardIds: []\n        };\n        clonedBoard.columns.push(column); // Save changes\n\n        board = clonedBoard;\n        resolve(deepCopy(column));\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  updateColumn({\n    columnId,\n    update\n  }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board); // Find the column to clear\n\n        const column = clonedBoard.columns.find(_column => _column.id === columnId); // Update the column\n\n        Object.assign(column, update); // Save changes\n\n        board = clonedBoard;\n        resolve(deepCopy(column));\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  clearColumn(columnId) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board); // Find the column to clear\n\n        const column = clonedBoard.columns.find(_column => _column.id === columnId);\n\n        if (!column) {\n          reject(new Error('Column not found'));\n          return;\n        } // Remove the cards with columnId reference\n\n\n        clonedBoard.cards = clonedBoard.cards.filter(card => card.columnId !== columnId); // Remove all cardIds from the column\n\n        column.cardIds = []; // Save changes\n\n        board = clonedBoard;\n        resolve(true);\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  deleteColumn(columnId) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board); // Find the column to remove\n\n        const column = clonedBoard.columns.find(_column => _column.id === columnId);\n\n        if (!column) {\n          reject(new Error('Column not found'));\n          return;\n        } // Remove the cards with columnId reference\n\n\n        clonedBoard.cards = clonedBoard.cards.filter(card => card.columnId !== columnId); // Remove the column from the board\n\n        clonedBoard.columns = clonedBoard.columns.filter(_column => _column.id !== columnId); // Save changes\n\n        board = clonedBoard;\n        resolve(true);\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  createCard({\n    columnId,\n    name\n  }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board); // Find the column where the new card will be added\n\n        const column = clonedBoard.columns.find(_column => _column.id === columnId);\n\n        if (!column) {\n          reject(new Error('Column not found'));\n          return;\n        } // Create the new card\n\n\n        const card = {\n          id: createResourceId(),\n          attachments: [],\n          checklists: [],\n          comments: [],\n          cover: null,\n          description: null,\n          due: null,\n          isSubscribed: false,\n          columnId,\n          memberIds: [],\n          name\n        }; // Add the new card\n\n        clonedBoard.cards.push(card); // Add the cardId reference to the column\n\n        column.cardIds.push(card.id); // Save changes\n\n        board = clonedBoard;\n        resolve(deepCopy(card));\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  updateCard({\n    cardId,\n    update\n  }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board); // Find the card that will be updated\n\n        const card = clonedBoard.cards.find(_card => _card.id === cardId);\n\n        if (!card) {\n          reject(new Error('Card not found'));\n          return;\n        } // Update the card\n\n\n        if (update.name) {\n          card.name = update.name;\n        }\n\n        if (update.description) {\n          card.description = update.description;\n        } // Update the card\n\n\n        Object.assign(card, update); // Save changes\n\n        board = clonedBoard;\n        resolve(deepCopy(card));\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  moveCard({\n    cardId,\n    position,\n    columnId\n  }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board); // Find the card that will be moved\n\n        const card = clonedBoard.cards.find(_card => _card.id === cardId);\n\n        if (!card) {\n          reject(new Error('Card not found'));\n          return;\n        } // Find the source column of the card\n\n\n        const sourceList = clonedBoard.columns.find(column => column.id === card.columnId);\n\n        if (!sourceList) {\n          reject(new Error('Column not found'));\n          return;\n        } // Remove the cardId reference from the source list\n\n\n        sourceList.cardIds = sourceList.cardIds.filter(_cardId => _cardId !== cardId);\n\n        if (columnId) {\n          // Find the destination column for the card\n          const destinationList = clonedBoard.columns.find(column => column.id === columnId);\n\n          if (!destinationList) {\n            reject(new Error('Column not found'));\n            return;\n          } // Add the cardId reference to the destination list\n\n\n          destinationList.cardIds.splice(position, 0, card.id); // Store the new columnId reference\n\n          card.columnId = destinationList.id;\n        } else {\n          // If columnId is not provided, it means that we move the card in the same list\n          sourceList.cardIds.splice(position, 0, card.id);\n        } // Save changes\n\n\n        board = clonedBoard;\n        resolve(true);\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  deleteCard(cardId) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board); // Find the card that will be removed\n\n        const card = clonedBoard.cards.find(_card => _card.id === cardId);\n\n        if (!card) {\n          reject(new Error('Card not found'));\n          return;\n        } // Remove the card from board\n\n\n        clonedBoard.cards = clonedBoard.cards.filter(_card => _card.id !== cardId); // Find the column using the columnId reference\n\n        const column = clonedBoard.columns.find(_column => _column.id === card.columnId); // If for some reason it does not exist, there's no problem. Maybe something broke before.\n\n        if (column) {\n          column.cardIds = column.cardIds.filter(_cardId => _cardId !== cardId);\n        } // Save changes\n\n\n        board = clonedBoard;\n        resolve(true);\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  addComment({\n    cardId,\n    message\n  }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board); // Find the card where the comment will be added\n\n        const card = clonedBoard.cards.find(_card => _card.id === cardId);\n\n        if (!card) {\n          reject(new Error('Card not found'));\n          return;\n        } // Create the new comment\n        // Important: On server get memberId from request identity (user)\n\n\n        const comment = {\n          id: createResourceId(),\n          cardId,\n          createdAt: now.getTime(),\n          memberId: '5e86809283e28b96d2d38537',\n          message\n        }; // Add the new comment to card\n\n        card.comments.push(comment); // Save changes\n\n        board = clonedBoard;\n        resolve(deepCopy(comment));\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  addChecklist({\n    cardId,\n    name\n  }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board); // Find the card where the checklist will be added\n\n        const card = clonedBoard.cards.find(_card => _card.id === cardId);\n\n        if (!card) {\n          reject(new Error('Card not found'));\n          return;\n        } // Create the new checklist\n\n\n        const checklist = {\n          id: createResourceId(),\n          name,\n          checkItems: []\n        }; // Add the new checklist to card\n\n        card.checklists.push(checklist); // Save changes\n\n        board = clonedBoard;\n        resolve(deepCopy(checklist));\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  updateChecklist({\n    cardId,\n    checklistId,\n    update\n  }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board); // Find the card that contains the checklist that will be updated\n\n        const card = clonedBoard.cards.find(_card => _card.id === cardId);\n\n        if (!card) {\n          reject(new Error('Card not found'));\n          return;\n        } // Find the checklist that will be updated\n\n\n        const checklist = card.checklists.find(_checklist => _checklist.id === checklistId);\n\n        if (!checklist) {\n          reject(new Error('Checklist not found'));\n          return;\n        } // Update the checklist\n\n\n        Object.assign(checklist, update); // Save changes\n\n        board = clonedBoard;\n        resolve(deepCopy(checklist));\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  deleteChecklist({\n    cardId,\n    checklistId\n  }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board); // Find the card that contains the checklist that will be removed\n\n        const card = clonedBoard.cards.find(_card => _card.id === cardId);\n\n        if (!card) {\n          reject(new Error('Card not found'));\n          return;\n        } // Remove the checklist from the card\n\n\n        card.checklists = card.checklists.filter(checklists => checklists.id !== checklistId); // Save changes\n\n        board = clonedBoard;\n        resolve(true);\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  addCheckItem({\n    cardId,\n    checklistId,\n    name\n  }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board); // Find the card where the checklist will be added\n\n        const card = clonedBoard.cards.find(_card => _card.id === cardId);\n\n        if (!card) {\n          reject(new Error('Card not found'));\n          return;\n        } // Find the checklist where the check item will be added\n\n\n        const checklist = card.checklists.find(_checklist => _checklist.id === checklistId);\n\n        if (!checklist) {\n          reject(new Error('Checklist not found'));\n          return;\n        } // Create the new check item\n\n\n        const checkItem = {\n          id: createResourceId(),\n          checklistId,\n          name,\n          state: 'incomplete'\n        }; // Add the check item to the checklist\n\n        checklist.checkItems.push(checkItem); // Save changes\n\n        board = clonedBoard;\n        resolve(deepCopy(checkItem));\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  updateCheckItem({\n    cardId,\n    checklistId,\n    checkItemId,\n    update\n  }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board); // Find the card where the checklist will be added\n\n        const card = clonedBoard.cards.find(_card => _card.id === cardId);\n\n        if (!card) {\n          reject(new Error('Card not found'));\n          return;\n        } // Find the checklist where the check item will be updated\n\n\n        const checklist = card.checklists.find(_checklist => _checklist.id === checklistId);\n\n        if (!checklist) {\n          reject(new Error('Checklist not found'));\n          return;\n        } // Find the checklist where the check item will be updated\n\n\n        const checkItem = checklist.checkItems.find(_checkItem => _checkItem.id === checkItemId);\n\n        if (!checkItem) {\n          reject(new Error('Check item not found'));\n          return;\n        } // Update the check item\n\n\n        Object.assign(checkItem, update); // Save changes\n\n        board = clonedBoard;\n        resolve(deepCopy(checkItem));\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  deleteCheckItem({\n    cardId,\n    checklistId,\n    checkItemId\n  }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board); // Find the card that contains the checklist that contains the check item that will be removed\n\n        const card = clonedBoard.cards.find(_card => _card.id === cardId);\n\n        if (!card) {\n          reject(new Error('Card not found'));\n          return;\n        } // Find the checklist where the check item will be updated\n\n\n        const checklist = card.checklists.find(_checklist => _checklist.id === checklistId);\n\n        if (!checklist) {\n          reject(new Error('Checklist not found'));\n          return;\n        } // Remove the check item from the checklist\n\n\n        checklist.checkItems = checklist.checkItems.filter(checkItem => checkItem.id !== checkItemId); // Save changes\n\n        board = clonedBoard;\n        resolve(true);\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n}\n\nexport const kanbanApi = new KanbanApi();","map":{"version":3,"sources":["/home/ec2-user/environment/VarsityMediaLive07042021/src/__fakeApi__/kanbanApi.js"],"names":["subDays","addDays","createResourceId","deepCopy","now","Date","board","cards","id","attachments","checklists","name","checkItems","state","comments","cardId","createdAt","getTime","memberId","message","cover","description","due","isSubscribed","columnId","memberIds","columns","cardIds","members","avatar","KanbanApi","getBoard","Promise","resolve","createColumn","reject","clonedBoard","column","push","err","console","error","Error","updateColumn","update","find","_column","Object","assign","clearColumn","filter","card","deleteColumn","createCard","updateCard","_card","moveCard","position","sourceList","_cardId","destinationList","splice","deleteCard","addComment","comment","addChecklist","checklist","updateChecklist","checklistId","_checklist","deleteChecklist","addCheckItem","checkItem","updateCheckItem","checkItemId","_checkItem","deleteCheckItem","kanbanApi"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,OAAlB,QAAiC,UAAjC;AACA,OAAOC,gBAAP,MAA6B,2BAA7B;AACA,OAAOC,QAAP,MAAqB,mBAArB,C,CAEA;AACA;AACA;;AAEA,MAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AAEA,IAAIC,KAAK,GAAG;AACVC,EAAAA,KAAK,EAAE,CACL;AACEC,IAAAA,EAAE,EAAE,0BADN;AAEEC,IAAAA,WAAW,EAAE,EAFf;AAGEC,IAAAA,UAAU,EAAE,CACV;AACEF,MAAAA,EAAE,EAAE,0BADN;AAEEG,MAAAA,IAAI,EAAE,sBAFR;AAGEC,MAAAA,UAAU,EAAE,CACV;AACEJ,QAAAA,EAAE,EAAE,0BADN;AAEEG,QAAAA,IAAI,EAAE,SAFR;AAGEE,QAAAA,KAAK,EAAE;AAHT,OADU;AAHd,KADU,CAHd;AAgBEC,IAAAA,QAAQ,EAAE,CACR;AACEN,MAAAA,EAAE,EAAE,2BADN;AAEEO,MAAAA,MAAM,EAAE,0BAFV;AAGEC,MAAAA,SAAS,EAAEhB,OAAO,CAACI,GAAD,EAAM,CAAN,CAAP,CAAgBa,OAAhB,EAHb;AAIEC,MAAAA,QAAQ,EAAE,0BAJZ;AAKEC,MAAAA,OAAO,EAAE;AALX,KADQ,CAhBZ;AAyBEC,IAAAA,KAAK,EAAE,4CAzBT;AA0BEC,IAAAA,WAAW,EAAE,ikBA1Bf;AA2BEC,IAAAA,GAAG,EAAErB,OAAO,CAACG,GAAD,EAAM,CAAN,CAAP,CAAgBa,OAAhB,EA3BP;AA4BEM,IAAAA,YAAY,EAAE,KA5BhB;AA6BEC,IAAAA,QAAQ,EAAE,0BA7BZ;AA8BEC,IAAAA,SAAS,EAAE,CAAC,0BAAD,CA9Bb;AA+BEd,IAAAA,IAAI,EAAE;AA/BR,GADK,EAkCL;AACEH,IAAAA,EAAE,EAAE,0BADN;AAEEC,IAAAA,WAAW,EAAE,EAFf;AAGEC,IAAAA,UAAU,EAAE,EAHd;AAIEI,IAAAA,QAAQ,EAAE,EAJZ;AAKEM,IAAAA,KAAK,EAAE,IALT;AAMEC,IAAAA,WAAW,EAAE,0EANf;AAOEC,IAAAA,GAAG,EAAErB,OAAO,CAACG,GAAD,EAAM,CAAN,CAAP,CAAgBa,OAAhB,EAPP;AAQEM,IAAAA,YAAY,EAAE,IARhB;AASEC,IAAAA,QAAQ,EAAE,0BATZ;AAUEC,IAAAA,SAAS,EAAE,CAAC,0BAAD,EAA6B,0BAA7B,CAVb;AAWEd,IAAAA,IAAI,EAAE;AAXR,GAlCK,EA+CL;AACEH,IAAAA,EAAE,EAAE,0BADN;AAEEC,IAAAA,WAAW,EAAE,EAFf;AAGEC,IAAAA,UAAU,EAAE,EAHd;AAIEI,IAAAA,QAAQ,EAAE,EAJZ;AAKEM,IAAAA,KAAK,EAAE,IALT;AAMEC,IAAAA,WAAW,EAAE,yFANf;AAOEC,IAAAA,GAAG,EAAE,IAPP;AAQEC,IAAAA,YAAY,EAAE,KARhB;AASEC,IAAAA,QAAQ,EAAE,0BATZ;AAUEC,IAAAA,SAAS,EAAE,EAVb;AAWEd,IAAAA,IAAI,EAAE;AAXR,GA/CK,EA4DL;AACEH,IAAAA,EAAE,EAAE,0BADN;AAEEC,IAAAA,WAAW,EAAE,EAFf;AAGEC,IAAAA,UAAU,EAAE,EAHd;AAIEI,IAAAA,QAAQ,EAAE,EAJZ;AAKEM,IAAAA,KAAK,EAAE,IALT;AAMEC,IAAAA,WAAW,EAAE,yFANf;AAOEC,IAAAA,GAAG,EAAE,IAPP;AAQEC,IAAAA,YAAY,EAAE,KARhB;AASEC,IAAAA,QAAQ,EAAE,0BATZ;AAUEC,IAAAA,SAAS,EAAE,CAAC,0BAAD,EAA6B,0BAA7B,CAVb;AAWEd,IAAAA,IAAI,EAAE;AAXR,GA5DK,EAyEL;AACEH,IAAAA,EAAE,EAAE,0BADN;AAEEC,IAAAA,WAAW,EAAE,EAFf;AAGEC,IAAAA,UAAU,EAAE,EAHd;AAIEI,IAAAA,QAAQ,EAAE,EAJZ;AAKEM,IAAAA,KAAK,EAAE,IALT;AAMEC,IAAAA,WAAW,EAAE,yFANf;AAOEC,IAAAA,GAAG,EAAE,IAPP;AAQEC,IAAAA,YAAY,EAAE,IARhB;AASEC,IAAAA,QAAQ,EAAE,0BATZ;AAUEC,IAAAA,SAAS,EAAE,CAAC,0BAAD,CAVb;AAWEd,IAAAA,IAAI,EAAE;AAXR,GAzEK,EAsFL;AACEH,IAAAA,EAAE,EAAE,0BADN;AAEEC,IAAAA,WAAW,EAAE,EAFf;AAGEC,IAAAA,UAAU,EAAE,EAHd;AAIEI,IAAAA,QAAQ,EAAE,EAJZ;AAKEM,IAAAA,KAAK,EAAE,IALT;AAMEC,IAAAA,WAAW,EAAE,yFANf;AAOEC,IAAAA,GAAG,EAAE,IAPP;AAQEC,IAAAA,YAAY,EAAE,IARhB;AASEC,IAAAA,QAAQ,EAAE,0BATZ;AAUEC,IAAAA,SAAS,EAAE,EAVb;AAWEd,IAAAA,IAAI,EAAE;AAXR,GAtFK,CADG;AAqGVe,EAAAA,OAAO,EAAE,CACP;AACElB,IAAAA,EAAE,EAAE,0BADN;AAEEG,IAAAA,IAAI,EAAE,MAFR;AAGEgB,IAAAA,OAAO,EAAE,CACP,0BADO,EAEP,0BAFO,EAGP,0BAHO,EAIP,0BAJO;AAHX,GADO,EAWP;AACEnB,IAAAA,EAAE,EAAE,0BADN;AAEEG,IAAAA,IAAI,EAAE,UAFR;AAGEgB,IAAAA,OAAO,EAAE,CACP,0BADO,EAEP,0BAFO;AAHX,GAXO,EAmBP;AACEnB,IAAAA,EAAE,EAAE,2BADN;AAEEG,IAAAA,IAAI,EAAE,MAFR;AAGEgB,IAAAA,OAAO,EAAE;AAHX,GAnBO,CArGC;AA8HVC,EAAAA,OAAO,EAAE,CACP;AACEpB,IAAAA,EAAE,EAAE,0BADN;AAEEqB,IAAAA,MAAM,EAAE,oDAFV;AAGElB,IAAAA,IAAI,EAAE;AAHR,GADO,EAMP;AACEH,IAAAA,EAAE,EAAE,0BADN;AAEEqB,IAAAA,MAAM,EAAE,sDAFV;AAGElB,IAAAA,IAAI,EAAE;AAHR,GANO,EAWP;AACEH,IAAAA,EAAE,EAAE,0BADN;AAEEqB,IAAAA,MAAM,EAAE,mDAFV;AAGElB,IAAAA,IAAI,EAAE;AAHR,GAXO,EAgBP;AACEH,IAAAA,EAAE,EAAE,0BADN;AAEEqB,IAAAA,MAAM,EAAE,qDAFV;AAGElB,IAAAA,IAAI,EAAE;AAHR,GAhBO,EAqBP;AACEH,IAAAA,EAAE,EAAE,0BADN;AAEEqB,IAAAA,MAAM,EAAE,sDAFV;AAGElB,IAAAA,IAAI,EAAE;AAHR,GArBO;AA9HC,CAAZ;;AA2JA,MAAMmB,SAAN,CAAgB;AACdC,EAAAA,QAAQ,GAAG;AACT,WAAOC,OAAO,CAACC,OAAR,CAAgB9B,QAAQ,CAACG,KAAD,CAAxB,CAAP;AACD;;AAED4B,EAAAA,YAAY,CAAC;AAAEvB,IAAAA;AAAF,GAAD,EAAW;AACrB,WAAO,IAAIqB,OAAJ,CAAY,CAACC,OAAD,EAAUE,MAAV,KAAqB;AACtC,UAAI;AACF;AACA,cAAMC,WAAW,GAAGjC,QAAQ,CAACG,KAAD,CAA5B,CAFE,CAIF;;AACA,cAAM+B,MAAM,GAAG;AACb7B,UAAAA,EAAE,EAAEN,gBAAgB,EADP;AAEbS,UAAAA,IAFa;AAGbgB,UAAAA,OAAO,EAAE;AAHI,SAAf;AAMAS,QAAAA,WAAW,CAACV,OAAZ,CAAoBY,IAApB,CAAyBD,MAAzB,EAXE,CAaF;;AACA/B,QAAAA,KAAK,GAAG8B,WAAR;AAEAH,QAAAA,OAAO,CAAC9B,QAAQ,CAACkC,MAAD,CAAT,CAAP;AACD,OAjBD,CAiBE,OAAOE,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAc,gBAAd,EAAgCF,GAAhC;AACAJ,QAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,uBAAV,CAAD,CAAN;AACD;AACF,KAtBM,CAAP;AAuBD;;AAEDC,EAAAA,YAAY,CAAC;AAAEnB,IAAAA,QAAF;AAAYoB,IAAAA;AAAZ,GAAD,EAAuB;AACjC,WAAO,IAAIZ,OAAJ,CAAY,CAACC,OAAD,EAAUE,MAAV,KAAqB;AACtC,UAAI;AACF;AACA,cAAMC,WAAW,GAAGjC,QAAQ,CAACG,KAAD,CAA5B,CAFE,CAIF;;AACA,cAAM+B,MAAM,GAAGD,WAAW,CAACV,OAAZ,CAAoBmB,IAApB,CAA0BC,OAAD,IAAaA,OAAO,CAACtC,EAAR,KAAegB,QAArD,CAAf,CALE,CAOF;;AACAuB,QAAAA,MAAM,CAACC,MAAP,CAAcX,MAAd,EAAsBO,MAAtB,EARE,CAUF;;AACAtC,QAAAA,KAAK,GAAG8B,WAAR;AAEAH,QAAAA,OAAO,CAAC9B,QAAQ,CAACkC,MAAD,CAAT,CAAP;AACD,OAdD,CAcE,OAAOE,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAc,gBAAd,EAAgCF,GAAhC;AACAJ,QAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,uBAAV,CAAD,CAAN;AACD;AACF,KAnBM,CAAP;AAoBD;;AAEDO,EAAAA,WAAW,CAACzB,QAAD,EAAW;AACpB,WAAO,IAAIQ,OAAJ,CAAY,CAACC,OAAD,EAAUE,MAAV,KAAqB;AACtC,UAAI;AACF;AACA,cAAMC,WAAW,GAAGjC,QAAQ,CAACG,KAAD,CAA5B,CAFE,CAIF;;AACA,cAAM+B,MAAM,GAAGD,WAAW,CAACV,OAAZ,CAAoBmB,IAApB,CAA0BC,OAAD,IAAaA,OAAO,CAACtC,EAAR,KAAegB,QAArD,CAAf;;AAEA,YAAI,CAACa,MAAL,EAAa;AACXF,UAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,kBAAV,CAAD,CAAN;AACA;AACD,SAVC,CAYF;;;AACAN,QAAAA,WAAW,CAAC7B,KAAZ,GAAoB6B,WAAW,CAAC7B,KAAZ,CAAkB2C,MAAlB,CAA0BC,IAAD,IAAUA,IAAI,CAAC3B,QAAL,KAAkBA,QAArD,CAApB,CAbE,CAeF;;AACAa,QAAAA,MAAM,CAACV,OAAP,GAAiB,EAAjB,CAhBE,CAkBF;;AACArB,QAAAA,KAAK,GAAG8B,WAAR;AAEAH,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OAtBD,CAsBE,OAAOM,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAc,gBAAd,EAAgCF,GAAhC;AACAJ,QAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,uBAAV,CAAD,CAAN;AACD;AACF,KA3BM,CAAP;AA4BD;;AAEDU,EAAAA,YAAY,CAAC5B,QAAD,EAAW;AACrB,WAAO,IAAIQ,OAAJ,CAAY,CAACC,OAAD,EAAUE,MAAV,KAAqB;AACtC,UAAI;AACF;AACA,cAAMC,WAAW,GAAGjC,QAAQ,CAACG,KAAD,CAA5B,CAFE,CAIF;;AACA,cAAM+B,MAAM,GAAGD,WAAW,CAACV,OAAZ,CAAoBmB,IAApB,CAA0BC,OAAD,IAAaA,OAAO,CAACtC,EAAR,KAAegB,QAArD,CAAf;;AAEA,YAAI,CAACa,MAAL,EAAa;AACXF,UAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,kBAAV,CAAD,CAAN;AACA;AACD,SAVC,CAYF;;;AACAN,QAAAA,WAAW,CAAC7B,KAAZ,GAAoB6B,WAAW,CAAC7B,KAAZ,CAAkB2C,MAAlB,CAA0BC,IAAD,IAAUA,IAAI,CAAC3B,QAAL,KAAkBA,QAArD,CAApB,CAbE,CAeF;;AACAY,QAAAA,WAAW,CAACV,OAAZ,GAAsBU,WAAW,CAACV,OAAZ,CAAoBwB,MAApB,CAA4BJ,OAAD,IAAaA,OAAO,CAACtC,EAAR,KAAegB,QAAvD,CAAtB,CAhBE,CAkBF;;AACAlB,QAAAA,KAAK,GAAG8B,WAAR;AAEAH,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OAtBD,CAsBE,OAAOM,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAc,gBAAd,EAAgCF,GAAhC;AACAJ,QAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,uBAAV,CAAD,CAAN;AACD;AACF,KA3BM,CAAP;AA4BD;;AAEDW,EAAAA,UAAU,CAAC;AAAE7B,IAAAA,QAAF;AAAYb,IAAAA;AAAZ,GAAD,EAAqB;AAC7B,WAAO,IAAIqB,OAAJ,CAAY,CAACC,OAAD,EAAUE,MAAV,KAAqB;AACtC,UAAI;AACF;AACA,cAAMC,WAAW,GAAGjC,QAAQ,CAACG,KAAD,CAA5B,CAFE,CAIF;;AACA,cAAM+B,MAAM,GAAGD,WAAW,CAACV,OAAZ,CAAoBmB,IAApB,CAA0BC,OAAD,IAAaA,OAAO,CAACtC,EAAR,KAAegB,QAArD,CAAf;;AAEA,YAAI,CAACa,MAAL,EAAa;AACXF,UAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,kBAAV,CAAD,CAAN;AACA;AACD,SAVC,CAYF;;;AACA,cAAMS,IAAI,GAAG;AACX3C,UAAAA,EAAE,EAAEN,gBAAgB,EADT;AAEXO,UAAAA,WAAW,EAAE,EAFF;AAGXC,UAAAA,UAAU,EAAE,EAHD;AAIXI,UAAAA,QAAQ,EAAE,EAJC;AAKXM,UAAAA,KAAK,EAAE,IALI;AAMXC,UAAAA,WAAW,EAAE,IANF;AAOXC,UAAAA,GAAG,EAAE,IAPM;AAQXC,UAAAA,YAAY,EAAE,KARH;AASXC,UAAAA,QATW;AAUXC,UAAAA,SAAS,EAAE,EAVA;AAWXd,UAAAA;AAXW,SAAb,CAbE,CA2BF;;AACAyB,QAAAA,WAAW,CAAC7B,KAAZ,CAAkB+B,IAAlB,CAAuBa,IAAvB,EA5BE,CA8BF;;AACAd,QAAAA,MAAM,CAACV,OAAP,CAAeW,IAAf,CAAoBa,IAAI,CAAC3C,EAAzB,EA/BE,CAiCF;;AACAF,QAAAA,KAAK,GAAG8B,WAAR;AAEAH,QAAAA,OAAO,CAAC9B,QAAQ,CAACgD,IAAD,CAAT,CAAP;AACD,OArCD,CAqCE,OAAOZ,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAc,gBAAd,EAAgCF,GAAhC;AACAJ,QAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,uBAAV,CAAD,CAAN;AACD;AACF,KA1CM,CAAP;AA2CD;;AAEDY,EAAAA,UAAU,CAAC;AAAEvC,IAAAA,MAAF;AAAU6B,IAAAA;AAAV,GAAD,EAAqB;AAC7B,WAAO,IAAIZ,OAAJ,CAAY,CAACC,OAAD,EAAUE,MAAV,KAAqB;AACtC,UAAI;AACF;AACA,cAAMC,WAAW,GAAGjC,QAAQ,CAACG,KAAD,CAA5B,CAFE,CAIF;;AACA,cAAM6C,IAAI,GAAGf,WAAW,CAAC7B,KAAZ,CAAkBsC,IAAlB,CAAwBU,KAAD,IAAWA,KAAK,CAAC/C,EAAN,KAAaO,MAA/C,CAAb;;AAEA,YAAI,CAACoC,IAAL,EAAW;AACThB,UAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,gBAAV,CAAD,CAAN;AACA;AACD,SAVC,CAYF;;;AACA,YAAIE,MAAM,CAACjC,IAAX,EAAiB;AACfwC,UAAAA,IAAI,CAACxC,IAAL,GAAYiC,MAAM,CAACjC,IAAnB;AACD;;AAED,YAAIiC,MAAM,CAACvB,WAAX,EAAwB;AACtB8B,UAAAA,IAAI,CAAC9B,WAAL,GAAmBuB,MAAM,CAACvB,WAA1B;AACD,SAnBC,CAqBF;;;AACA0B,QAAAA,MAAM,CAACC,MAAP,CAAcG,IAAd,EAAoBP,MAApB,EAtBE,CAwBF;;AACAtC,QAAAA,KAAK,GAAG8B,WAAR;AAEAH,QAAAA,OAAO,CAAC9B,QAAQ,CAACgD,IAAD,CAAT,CAAP;AACD,OA5BD,CA4BE,OAAOZ,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAc,gBAAd,EAAgCF,GAAhC;AACAJ,QAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,uBAAV,CAAD,CAAN;AACD;AACF,KAjCM,CAAP;AAkCD;;AAEDc,EAAAA,QAAQ,CAAC;AAAEzC,IAAAA,MAAF;AAAU0C,IAAAA,QAAV;AAAoBjC,IAAAA;AAApB,GAAD,EAAiC;AACvC,WAAO,IAAIQ,OAAJ,CAAY,CAACC,OAAD,EAAUE,MAAV,KAAqB;AACtC,UAAI;AACF;AACA,cAAMC,WAAW,GAAGjC,QAAQ,CAACG,KAAD,CAA5B,CAFE,CAIF;;AACA,cAAM6C,IAAI,GAAGf,WAAW,CAAC7B,KAAZ,CAAkBsC,IAAlB,CAAwBU,KAAD,IAAWA,KAAK,CAAC/C,EAAN,KAAaO,MAA/C,CAAb;;AAEA,YAAI,CAACoC,IAAL,EAAW;AACThB,UAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,gBAAV,CAAD,CAAN;AACA;AACD,SAVC,CAYF;;;AACA,cAAMgB,UAAU,GAAGtB,WAAW,CAACV,OAAZ,CAAoBmB,IAApB,CAA0BR,MAAD,IAAYA,MAAM,CAAC7B,EAAP,KAAc2C,IAAI,CAAC3B,QAAxD,CAAnB;;AAEA,YAAI,CAACkC,UAAL,EAAiB;AACfvB,UAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,kBAAV,CAAD,CAAN;AACA;AACD,SAlBC,CAoBF;;;AACAgB,QAAAA,UAAU,CAAC/B,OAAX,GAAqB+B,UAAU,CAAC/B,OAAX,CAAmBuB,MAAnB,CAA2BS,OAAD,IAAaA,OAAO,KAAK5C,MAAnD,CAArB;;AAEA,YAAIS,QAAJ,EAAc;AACZ;AACA,gBAAMoC,eAAe,GAAGxB,WAAW,CAACV,OAAZ,CAAoBmB,IAApB,CAA0BR,MAAD,IAAYA,MAAM,CAAC7B,EAAP,KAAcgB,QAAnD,CAAxB;;AAEA,cAAI,CAACoC,eAAL,EAAsB;AACpBzB,YAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,kBAAV,CAAD,CAAN;AACA;AACD,WAPW,CASZ;;;AACAkB,UAAAA,eAAe,CAACjC,OAAhB,CAAwBkC,MAAxB,CAA+BJ,QAA/B,EAAyC,CAAzC,EAA4CN,IAAI,CAAC3C,EAAjD,EAVY,CAYZ;;AACA2C,UAAAA,IAAI,CAAC3B,QAAL,GAAgBoC,eAAe,CAACpD,EAAhC;AACD,SAdD,MAcO;AACL;AACAkD,UAAAA,UAAU,CAAC/B,OAAX,CAAmBkC,MAAnB,CAA0BJ,QAA1B,EAAoC,CAApC,EAAuCN,IAAI,CAAC3C,EAA5C;AACD,SAxCC,CA0CF;;;AACAF,QAAAA,KAAK,GAAG8B,WAAR;AAEAH,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OA9CD,CA8CE,OAAOM,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAc,gBAAd,EAAgCF,GAAhC;AACAJ,QAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,uBAAV,CAAD,CAAN;AACD;AACF,KAnDM,CAAP;AAoDD;;AAEDoB,EAAAA,UAAU,CAAC/C,MAAD,EAAS;AACjB,WAAO,IAAIiB,OAAJ,CAAY,CAACC,OAAD,EAAUE,MAAV,KAAqB;AACtC,UAAI;AACF;AACA,cAAMC,WAAW,GAAGjC,QAAQ,CAACG,KAAD,CAA5B,CAFE,CAIF;;AACA,cAAM6C,IAAI,GAAGf,WAAW,CAAC7B,KAAZ,CAAkBsC,IAAlB,CAAwBU,KAAD,IAAWA,KAAK,CAAC/C,EAAN,KAAaO,MAA/C,CAAb;;AAEA,YAAI,CAACoC,IAAL,EAAW;AACThB,UAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,gBAAV,CAAD,CAAN;AACA;AACD,SAVC,CAYF;;;AACAN,QAAAA,WAAW,CAAC7B,KAAZ,GAAoB6B,WAAW,CAAC7B,KAAZ,CAAkB2C,MAAlB,CAA0BK,KAAD,IAAWA,KAAK,CAAC/C,EAAN,KAAaO,MAAjD,CAApB,CAbE,CAeF;;AACA,cAAMsB,MAAM,GAAGD,WAAW,CAACV,OAAZ,CAAoBmB,IAApB,CAA0BC,OAAD,IAAaA,OAAO,CAACtC,EAAR,KAAe2C,IAAI,CAAC3B,QAA1D,CAAf,CAhBE,CAkBF;;AACA,YAAIa,MAAJ,EAAY;AACVA,UAAAA,MAAM,CAACV,OAAP,GAAiBU,MAAM,CAACV,OAAP,CAAeuB,MAAf,CAAuBS,OAAD,IAAaA,OAAO,KAAK5C,MAA/C,CAAjB;AACD,SArBC,CAuBF;;;AACAT,QAAAA,KAAK,GAAG8B,WAAR;AAEAH,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OA3BD,CA2BE,OAAOM,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAc,gBAAd,EAAgCF,GAAhC;AACAJ,QAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,uBAAV,CAAD,CAAN;AACD;AACF,KAhCM,CAAP;AAiCD;;AAEDqB,EAAAA,UAAU,CAAC;AAAEhD,IAAAA,MAAF;AAAUI,IAAAA;AAAV,GAAD,EAAsB;AAC9B,WAAO,IAAIa,OAAJ,CAAY,CAACC,OAAD,EAAUE,MAAV,KAAqB;AACtC,UAAI;AACF;AACA,cAAMC,WAAW,GAAGjC,QAAQ,CAACG,KAAD,CAA5B,CAFE,CAIF;;AACA,cAAM6C,IAAI,GAAGf,WAAW,CAAC7B,KAAZ,CAAkBsC,IAAlB,CAAwBU,KAAD,IAAWA,KAAK,CAAC/C,EAAN,KAAaO,MAA/C,CAAb;;AAEA,YAAI,CAACoC,IAAL,EAAW;AACThB,UAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,gBAAV,CAAD,CAAN;AACA;AACD,SAVC,CAYF;AACA;;;AACA,cAAMsB,OAAO,GAAG;AACdxD,UAAAA,EAAE,EAAEN,gBAAgB,EADN;AAEda,UAAAA,MAFc;AAGdC,UAAAA,SAAS,EAAEZ,GAAG,CAACa,OAAJ,EAHG;AAIdC,UAAAA,QAAQ,EAAE,0BAJI;AAKdC,UAAAA;AALc,SAAhB,CAdE,CAsBF;;AACAgC,QAAAA,IAAI,CAACrC,QAAL,CAAcwB,IAAd,CAAmB0B,OAAnB,EAvBE,CAyBF;;AACA1D,QAAAA,KAAK,GAAG8B,WAAR;AAEAH,QAAAA,OAAO,CAAC9B,QAAQ,CAAC6D,OAAD,CAAT,CAAP;AACD,OA7BD,CA6BE,OAAOzB,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAc,gBAAd,EAAgCF,GAAhC;AACAJ,QAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,uBAAV,CAAD,CAAN;AACD;AACF,KAlCM,CAAP;AAmCD;;AAEDuB,EAAAA,YAAY,CAAC;AAAElD,IAAAA,MAAF;AAAUJ,IAAAA;AAAV,GAAD,EAAmB;AAC7B,WAAO,IAAIqB,OAAJ,CAAY,CAACC,OAAD,EAAUE,MAAV,KAAqB;AACtC,UAAI;AACF;AACA,cAAMC,WAAW,GAAGjC,QAAQ,CAACG,KAAD,CAA5B,CAFE,CAIF;;AACA,cAAM6C,IAAI,GAAGf,WAAW,CAAC7B,KAAZ,CAAkBsC,IAAlB,CAAwBU,KAAD,IAAWA,KAAK,CAAC/C,EAAN,KAAaO,MAA/C,CAAb;;AAEA,YAAI,CAACoC,IAAL,EAAW;AACThB,UAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,gBAAV,CAAD,CAAN;AACA;AACD,SAVC,CAYF;;;AACA,cAAMwB,SAAS,GAAG;AAChB1D,UAAAA,EAAE,EAAEN,gBAAgB,EADJ;AAEhBS,UAAAA,IAFgB;AAGhBC,UAAAA,UAAU,EAAE;AAHI,SAAlB,CAbE,CAmBF;;AACAuC,QAAAA,IAAI,CAACzC,UAAL,CAAgB4B,IAAhB,CAAqB4B,SAArB,EApBE,CAsBF;;AACA5D,QAAAA,KAAK,GAAG8B,WAAR;AAEAH,QAAAA,OAAO,CAAC9B,QAAQ,CAAC+D,SAAD,CAAT,CAAP;AACD,OA1BD,CA0BE,OAAO3B,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAc,gBAAd,EAAgCF,GAAhC;AACAJ,QAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,uBAAV,CAAD,CAAN;AACD;AACF,KA/BM,CAAP;AAgCD;;AAEDyB,EAAAA,eAAe,CAAC;AAAEpD,IAAAA,MAAF;AAAUqD,IAAAA,WAAV;AAAuBxB,IAAAA;AAAvB,GAAD,EAAkC;AAC/C,WAAO,IAAIZ,OAAJ,CAAY,CAACC,OAAD,EAAUE,MAAV,KAAqB;AACtC,UAAI;AACF;AACA,cAAMC,WAAW,GAAGjC,QAAQ,CAACG,KAAD,CAA5B,CAFE,CAIF;;AACA,cAAM6C,IAAI,GAAGf,WAAW,CAAC7B,KAAZ,CAAkBsC,IAAlB,CAAwBU,KAAD,IAAWA,KAAK,CAAC/C,EAAN,KAAaO,MAA/C,CAAb;;AAEA,YAAI,CAACoC,IAAL,EAAW;AACThB,UAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,gBAAV,CAAD,CAAN;AACA;AACD,SAVC,CAYF;;;AACA,cAAMwB,SAAS,GAAGf,IAAI,CAACzC,UAAL,CAAgBmC,IAAhB,CAAsBwB,UAAD,IAAgBA,UAAU,CAAC7D,EAAX,KAAkB4D,WAAvD,CAAlB;;AAEA,YAAI,CAACF,SAAL,EAAgB;AACd/B,UAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,qBAAV,CAAD,CAAN;AACA;AACD,SAlBC,CAoBF;;;AACAK,QAAAA,MAAM,CAACC,MAAP,CAAckB,SAAd,EAAyBtB,MAAzB,EArBE,CAuBF;;AACAtC,QAAAA,KAAK,GAAG8B,WAAR;AAEAH,QAAAA,OAAO,CAAC9B,QAAQ,CAAC+D,SAAD,CAAT,CAAP;AACD,OA3BD,CA2BE,OAAO3B,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAc,gBAAd,EAAgCF,GAAhC;AACAJ,QAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,uBAAV,CAAD,CAAN;AACD;AACF,KAhCM,CAAP;AAiCD;;AAED4B,EAAAA,eAAe,CAAC;AAAEvD,IAAAA,MAAF;AAAUqD,IAAAA;AAAV,GAAD,EAA0B;AACvC,WAAO,IAAIpC,OAAJ,CAAY,CAACC,OAAD,EAAUE,MAAV,KAAqB;AACtC,UAAI;AACF;AACA,cAAMC,WAAW,GAAGjC,QAAQ,CAACG,KAAD,CAA5B,CAFE,CAIF;;AACA,cAAM6C,IAAI,GAAGf,WAAW,CAAC7B,KAAZ,CAAkBsC,IAAlB,CAAwBU,KAAD,IAAWA,KAAK,CAAC/C,EAAN,KAAaO,MAA/C,CAAb;;AAEA,YAAI,CAACoC,IAAL,EAAW;AACThB,UAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,gBAAV,CAAD,CAAN;AACA;AACD,SAVC,CAYF;;;AACAS,QAAAA,IAAI,CAACzC,UAAL,GAAkByC,IAAI,CAACzC,UAAL,CAAgBwC,MAAhB,CAAwBxC,UAAD,IAAgBA,UAAU,CAACF,EAAX,KAAkB4D,WAAzD,CAAlB,CAbE,CAeF;;AACA9D,QAAAA,KAAK,GAAG8B,WAAR;AAEAH,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OAnBD,CAmBE,OAAOM,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAc,gBAAd,EAAgCF,GAAhC;AACAJ,QAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,uBAAV,CAAD,CAAN;AACD;AACF,KAxBM,CAAP;AAyBD;;AAED6B,EAAAA,YAAY,CAAC;AAAExD,IAAAA,MAAF;AAAUqD,IAAAA,WAAV;AAAuBzD,IAAAA;AAAvB,GAAD,EAAgC;AAC1C,WAAO,IAAIqB,OAAJ,CAAY,CAACC,OAAD,EAAUE,MAAV,KAAqB;AACtC,UAAI;AACF;AACA,cAAMC,WAAW,GAAGjC,QAAQ,CAACG,KAAD,CAA5B,CAFE,CAIF;;AACA,cAAM6C,IAAI,GAAGf,WAAW,CAAC7B,KAAZ,CAAkBsC,IAAlB,CAAwBU,KAAD,IAAWA,KAAK,CAAC/C,EAAN,KAAaO,MAA/C,CAAb;;AAEA,YAAI,CAACoC,IAAL,EAAW;AACThB,UAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,gBAAV,CAAD,CAAN;AACA;AACD,SAVC,CAYF;;;AACA,cAAMwB,SAAS,GAAGf,IAAI,CAACzC,UAAL,CAAgBmC,IAAhB,CAAsBwB,UAAD,IAAgBA,UAAU,CAAC7D,EAAX,KAAkB4D,WAAvD,CAAlB;;AAEA,YAAI,CAACF,SAAL,EAAgB;AACd/B,UAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,qBAAV,CAAD,CAAN;AACA;AACD,SAlBC,CAoBF;;;AACA,cAAM8B,SAAS,GAAG;AAChBhE,UAAAA,EAAE,EAAEN,gBAAgB,EADJ;AAEhBkE,UAAAA,WAFgB;AAGhBzD,UAAAA,IAHgB;AAIhBE,UAAAA,KAAK,EAAE;AAJS,SAAlB,CArBE,CA4BF;;AACAqD,QAAAA,SAAS,CAACtD,UAAV,CAAqB0B,IAArB,CAA0BkC,SAA1B,EA7BE,CA+BF;;AACAlE,QAAAA,KAAK,GAAG8B,WAAR;AAEAH,QAAAA,OAAO,CAAC9B,QAAQ,CAACqE,SAAD,CAAT,CAAP;AACD,OAnCD,CAmCE,OAAOjC,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAc,gBAAd,EAAgCF,GAAhC;AACAJ,QAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,uBAAV,CAAD,CAAN;AACD;AACF,KAxCM,CAAP;AAyCD;;AAED+B,EAAAA,eAAe,CAAC;AAAE1D,IAAAA,MAAF;AAAUqD,IAAAA,WAAV;AAAuBM,IAAAA,WAAvB;AAAoC9B,IAAAA;AAApC,GAAD,EAA+C;AAC5D,WAAO,IAAIZ,OAAJ,CAAY,CAACC,OAAD,EAAUE,MAAV,KAAqB;AACtC,UAAI;AACF;AACA,cAAMC,WAAW,GAAGjC,QAAQ,CAACG,KAAD,CAA5B,CAFE,CAIF;;AACA,cAAM6C,IAAI,GAAGf,WAAW,CAAC7B,KAAZ,CAAkBsC,IAAlB,CAAwBU,KAAD,IAAWA,KAAK,CAAC/C,EAAN,KAAaO,MAA/C,CAAb;;AAEA,YAAI,CAACoC,IAAL,EAAW;AACThB,UAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,gBAAV,CAAD,CAAN;AACA;AACD,SAVC,CAYF;;;AACA,cAAMwB,SAAS,GAAGf,IAAI,CAACzC,UAAL,CAAgBmC,IAAhB,CAAsBwB,UAAD,IAAgBA,UAAU,CAAC7D,EAAX,KAAkB4D,WAAvD,CAAlB;;AAEA,YAAI,CAACF,SAAL,EAAgB;AACd/B,UAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,qBAAV,CAAD,CAAN;AACA;AACD,SAlBC,CAoBF;;;AACA,cAAM8B,SAAS,GAAGN,SAAS,CAACtD,UAAV,CAAqBiC,IAArB,CAA2B8B,UAAD,IAAgBA,UAAU,CAACnE,EAAX,KAAkBkE,WAA5D,CAAlB;;AAEA,YAAI,CAACF,SAAL,EAAgB;AACdrC,UAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,sBAAV,CAAD,CAAN;AACA;AACD,SA1BC,CA4BF;;;AACAK,QAAAA,MAAM,CAACC,MAAP,CAAcwB,SAAd,EAAyB5B,MAAzB,EA7BE,CA+BF;;AACAtC,QAAAA,KAAK,GAAG8B,WAAR;AAEAH,QAAAA,OAAO,CAAC9B,QAAQ,CAACqE,SAAD,CAAT,CAAP;AACD,OAnCD,CAmCE,OAAOjC,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAc,gBAAd,EAAgCF,GAAhC;AACAJ,QAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,uBAAV,CAAD,CAAN;AACD;AACF,KAxCM,CAAP;AAyCD;;AAEDkC,EAAAA,eAAe,CAAC;AAAE7D,IAAAA,MAAF;AAAUqD,IAAAA,WAAV;AAAuBM,IAAAA;AAAvB,GAAD,EAAuC;AACpD,WAAO,IAAI1C,OAAJ,CAAY,CAACC,OAAD,EAAUE,MAAV,KAAqB;AACtC,UAAI;AACF;AACA,cAAMC,WAAW,GAAGjC,QAAQ,CAACG,KAAD,CAA5B,CAFE,CAIF;;AACA,cAAM6C,IAAI,GAAGf,WAAW,CAAC7B,KAAZ,CAAkBsC,IAAlB,CAAwBU,KAAD,IAAWA,KAAK,CAAC/C,EAAN,KAAaO,MAA/C,CAAb;;AAEA,YAAI,CAACoC,IAAL,EAAW;AACThB,UAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,gBAAV,CAAD,CAAN;AACA;AACD,SAVC,CAYF;;;AACA,cAAMwB,SAAS,GAAGf,IAAI,CAACzC,UAAL,CAAgBmC,IAAhB,CAAsBwB,UAAD,IAAgBA,UAAU,CAAC7D,EAAX,KAAkB4D,WAAvD,CAAlB;;AAEA,YAAI,CAACF,SAAL,EAAgB;AACd/B,UAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,qBAAV,CAAD,CAAN;AACA;AACD,SAlBC,CAoBF;;;AACAwB,QAAAA,SAAS,CAACtD,UAAV,GAAuBsD,SAAS,CAACtD,UAAV,CAAqBsC,MAArB,CAA6BsB,SAAD,IAAgBA,SAAS,CAAChE,EAAV,KAAiBkE,WAA7D,CAAvB,CArBE,CAuBF;;AACApE,QAAAA,KAAK,GAAG8B,WAAR;AAEAH,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OA3BD,CA2BE,OAAOM,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAc,gBAAd,EAAgCF,GAAhC;AACAJ,QAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAU,uBAAV,CAAD,CAAN;AACD;AACF,KAhCM,CAAP;AAiCD;;AAriBa;;AAwiBhB,OAAO,MAAMmC,SAAS,GAAG,IAAI/C,SAAJ,EAAlB","sourcesContent":["import { subDays, addDays } from 'date-fns';\nimport createResourceId from '../utils/createResourceId';\nimport deepCopy from '../utils/deepCopy';\n\n// You'll see here that we start with a deep clone of the board.\n// The reason for that is to create a db session wannabe strategy.\n// If something fails, we do not affect the original data until everything worked as expected.\n\nconst now = new Date();\n\nlet board = {\n  cards: [\n    {\n      id: '5e849c8708bd72683b454747',\n      attachments: [],\n      checklists: [\n        {\n          id: '5e84a8175c48d3f5b1d01972',\n          name: 'Update overview page',\n          checkItems: [\n            {\n              id: '5e85af37da584c5e4bd8a06c',\n              name: 'An item',\n              state: 'complete'\n            }\n          ]\n        }\n      ],\n      comments: [\n        {\n          id: '15e849c5a35d4dff4f88ebff6',\n          cardId: '5e849c8708bd72683b454747',\n          createdAt: subDays(now, 5).getTime(),\n          memberId: '5e887ac47eed253091be10cb',\n          message: 'This is a comment'\n        }\n      ],\n      cover: '/static/mock-images/projects/project_3.png',\n      description: 'Duis condimentum lacus finibus felis pellentesque, ac auctor nibh fermentum. Duis sed dui ante. Phasellus id eros tincidunt, dictum lorem vitae, pellentesque sem. Aenean eu enim sit amet mauris rhoncus mollis. Sed enim turpis, porta a felis et, luctus faucibus nisi. Phasellus et metus fermentum, ultrices arcu aliquam, facilisis justo. Cras nunc nunc, elementum sed euismod ut, maximus eget nibh. Phasellus condimentum lorem neque. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Fusce sagittis pharetra eleifend. Suspendisse potenti.',\n      due: addDays(now, 7).getTime(),\n      isSubscribed: false,\n      columnId: '5e849c39325dc5ef58e5a5db',\n      memberIds: ['5e86809283e28b96d2d38537'],\n      name: 'Call with sales of HubSpot'\n    },\n    {\n      id: '5e849c90fabe1f1f4b3557f6',\n      attachments: [],\n      checklists: [],\n      comments: [],\n      cover: null,\n      description: 'We are looking for vue experience and of course node js strong knowledge',\n      due: addDays(now, 6).getTime(),\n      isSubscribed: true,\n      columnId: '5e849c39325dc5ef58e5a5db',\n      memberIds: ['5e887b209c28ac3dd97f6db5', '5e887a62195cc5aef7e8ca5d'],\n      name: 'Interview for the Asis. Sales Manager'\n    },\n    {\n      id: '5e849c977ef6265938bfd90b',\n      attachments: [],\n      checklists: [],\n      comments: [],\n      cover: null,\n      description: 'We need to make it aggressive with pricing because it’s in their interest to acquire us',\n      due: null,\n      isSubscribed: false,\n      columnId: '5e849c39325dc5ef58e5a5db',\n      memberIds: [],\n      name: 'Change the height of the top bar because it looks too chunky'\n    },\n    {\n      id: '5e849c9e34ee93bc7255c599',\n      attachments: [],\n      checklists: [],\n      comments: [],\n      cover: null,\n      description: 'We need to make it aggressive with pricing because it’s in their interest to acquire us',\n      due: null,\n      isSubscribed: false,\n      columnId: '5e849c39325dc5ef58e5a5db',\n      memberIds: ['5e887ac47eed253091be10cb', '5e86809283e28b96d2d38537'],\n      name: 'Integrate Stripe API'\n    },\n    {\n      id: '5e849ca7d063dc3830d4b49c',\n      attachments: [],\n      checklists: [],\n      comments: [],\n      cover: null,\n      description: 'We need to make it aggressive with pricing because it’s in their interest to acquire us',\n      due: null,\n      isSubscribed: true,\n      columnId: '5e849c2b38d238c33e516755',\n      memberIds: ['5e887a62195cc5aef7e8ca5d'],\n      name: 'Update the customer API for payments'\n    },\n    {\n      id: '5e849cb5d0c6e8894451fdfa',\n      attachments: [],\n      checklists: [],\n      comments: [],\n      cover: null,\n      description: 'We need to make it aggressive with pricing because it’s in their interest to acquire us',\n      due: null,\n      isSubscribed: true,\n      columnId: '5e849c2b38d238c33e516755',\n      memberIds: [],\n      name: 'Redesign the landing page'\n    }\n  ],\n  columns: [\n    {\n      id: '5e849c39325dc5ef58e5a5db',\n      name: 'Todo',\n      cardIds: [\n        '5e849c8708bd72683b454747',\n        '5e849c90fabe1f1f4b3557f6',\n        '5e849c977ef6265938bfd90b',\n        '5e849c9e34ee93bc7255c599'\n      ]\n    },\n    {\n      id: '5e849c2b38d238c33e516755',\n      name: 'Progress',\n      cardIds: [\n        '5e849ca7d063dc3830d4b49c',\n        '5e849cb5d0c6e8894451fdfa'\n      ]\n    },\n    {\n      id: '5e849c2b38d238c33e5146755',\n      name: 'Done',\n      cardIds: []\n    }\n  ],\n  members: [\n    {\n      id: '5e887a62195cc5aef7e8ca5d',\n      avatar: '/static/mock-images/avatars/avatar-marcus_finn.png',\n      name: 'Marcus Finn'\n    },\n    {\n      id: '5e887ac47eed253091be10cb',\n      avatar: '/static/mock-images/avatars/avatar-carson_darrin.png',\n      name: 'Carson Darrin'\n    },\n    {\n      id: '5e887b209c28ac3dd97f6db5',\n      avatar: '/static/mock-images/avatars/avatar-fran_perez.png',\n      name: 'Fran Perez'\n    },\n    {\n      id: '5e887b7602bdbc4dbb234b27',\n      avatar: '/static/mock-images/avatars/avatar-jie_yan_song.png',\n      name: 'Jie Yan Song'\n    },\n    {\n      id: '5e86809283e28b96d2d38537',\n      avatar: '/static/mock-images/avatars/avatar-jane_rotanson.png',\n      name: 'Jane Rotanson'\n    }\n  ]\n};\n\nclass KanbanApi {\n  getBoard() {\n    return Promise.resolve(deepCopy(board));\n  }\n\n  createColumn({ name }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board);\n\n        // Create the new column\n        const column = {\n          id: createResourceId(),\n          name,\n          cardIds: []\n        };\n\n        clonedBoard.columns.push(column);\n\n        // Save changes\n        board = clonedBoard;\n\n        resolve(deepCopy(column));\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  updateColumn({ columnId, update }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board);\n\n        // Find the column to clear\n        const column = clonedBoard.columns.find((_column) => _column.id === columnId);\n\n        // Update the column\n        Object.assign(column, update);\n\n        // Save changes\n        board = clonedBoard;\n\n        resolve(deepCopy(column));\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  clearColumn(columnId) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board);\n\n        // Find the column to clear\n        const column = clonedBoard.columns.find((_column) => _column.id === columnId);\n\n        if (!column) {\n          reject(new Error('Column not found'));\n          return;\n        }\n\n        // Remove the cards with columnId reference\n        clonedBoard.cards = clonedBoard.cards.filter((card) => card.columnId !== columnId);\n\n        // Remove all cardIds from the column\n        column.cardIds = [];\n\n        // Save changes\n        board = clonedBoard;\n\n        resolve(true);\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  deleteColumn(columnId) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board);\n\n        // Find the column to remove\n        const column = clonedBoard.columns.find((_column) => _column.id === columnId);\n\n        if (!column) {\n          reject(new Error('Column not found'));\n          return;\n        }\n\n        // Remove the cards with columnId reference\n        clonedBoard.cards = clonedBoard.cards.filter((card) => card.columnId !== columnId);\n\n        // Remove the column from the board\n        clonedBoard.columns = clonedBoard.columns.filter((_column) => _column.id !== columnId);\n\n        // Save changes\n        board = clonedBoard;\n\n        resolve(true);\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  createCard({ columnId, name }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board);\n\n        // Find the column where the new card will be added\n        const column = clonedBoard.columns.find((_column) => _column.id === columnId);\n\n        if (!column) {\n          reject(new Error('Column not found'));\n          return;\n        }\n\n        // Create the new card\n        const card = {\n          id: createResourceId(),\n          attachments: [],\n          checklists: [],\n          comments: [],\n          cover: null,\n          description: null,\n          due: null,\n          isSubscribed: false,\n          columnId,\n          memberIds: [],\n          name\n        };\n\n        // Add the new card\n        clonedBoard.cards.push(card);\n\n        // Add the cardId reference to the column\n        column.cardIds.push(card.id);\n\n        // Save changes\n        board = clonedBoard;\n\n        resolve(deepCopy(card));\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  updateCard({ cardId, update }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board);\n\n        // Find the card that will be updated\n        const card = clonedBoard.cards.find((_card) => _card.id === cardId);\n\n        if (!card) {\n          reject(new Error('Card not found'));\n          return;\n        }\n\n        // Update the card\n        if (update.name) {\n          card.name = update.name;\n        }\n\n        if (update.description) {\n          card.description = update.description;\n        }\n\n        // Update the card\n        Object.assign(card, update);\n\n        // Save changes\n        board = clonedBoard;\n\n        resolve(deepCopy(card));\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  moveCard({ cardId, position, columnId }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board);\n\n        // Find the card that will be moved\n        const card = clonedBoard.cards.find((_card) => _card.id === cardId);\n\n        if (!card) {\n          reject(new Error('Card not found'));\n          return;\n        }\n\n        // Find the source column of the card\n        const sourceList = clonedBoard.columns.find((column) => column.id === card.columnId);\n\n        if (!sourceList) {\n          reject(new Error('Column not found'));\n          return;\n        }\n\n        // Remove the cardId reference from the source list\n        sourceList.cardIds = sourceList.cardIds.filter((_cardId) => _cardId !== cardId);\n\n        if (columnId) {\n          // Find the destination column for the card\n          const destinationList = clonedBoard.columns.find((column) => column.id === columnId);\n\n          if (!destinationList) {\n            reject(new Error('Column not found'));\n            return;\n          }\n\n          // Add the cardId reference to the destination list\n          destinationList.cardIds.splice(position, 0, card.id);\n\n          // Store the new columnId reference\n          card.columnId = destinationList.id;\n        } else {\n          // If columnId is not provided, it means that we move the card in the same list\n          sourceList.cardIds.splice(position, 0, card.id);\n        }\n\n        // Save changes\n        board = clonedBoard;\n\n        resolve(true);\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  deleteCard(cardId) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board);\n\n        // Find the card that will be removed\n        const card = clonedBoard.cards.find((_card) => _card.id === cardId);\n\n        if (!card) {\n          reject(new Error('Card not found'));\n          return;\n        }\n\n        // Remove the card from board\n        clonedBoard.cards = clonedBoard.cards.filter((_card) => _card.id !== cardId);\n\n        // Find the column using the columnId reference\n        const column = clonedBoard.columns.find((_column) => _column.id === card.columnId);\n\n        // If for some reason it does not exist, there's no problem. Maybe something broke before.\n        if (column) {\n          column.cardIds = column.cardIds.filter((_cardId) => _cardId !== cardId);\n        }\n\n        // Save changes\n        board = clonedBoard;\n\n        resolve(true);\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  addComment({ cardId, message }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board);\n\n        // Find the card where the comment will be added\n        const card = clonedBoard.cards.find((_card) => _card.id === cardId);\n\n        if (!card) {\n          reject(new Error('Card not found'));\n          return;\n        }\n\n        // Create the new comment\n        // Important: On server get memberId from request identity (user)\n        const comment = {\n          id: createResourceId(),\n          cardId,\n          createdAt: now.getTime(),\n          memberId: '5e86809283e28b96d2d38537',\n          message\n        };\n\n        // Add the new comment to card\n        card.comments.push(comment);\n\n        // Save changes\n        board = clonedBoard;\n\n        resolve(deepCopy(comment));\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  addChecklist({ cardId, name }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board);\n\n        // Find the card where the checklist will be added\n        const card = clonedBoard.cards.find((_card) => _card.id === cardId);\n\n        if (!card) {\n          reject(new Error('Card not found'));\n          return;\n        }\n\n        // Create the new checklist\n        const checklist = {\n          id: createResourceId(),\n          name,\n          checkItems: []\n        };\n\n        // Add the new checklist to card\n        card.checklists.push(checklist);\n\n        // Save changes\n        board = clonedBoard;\n\n        resolve(deepCopy(checklist));\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  updateChecklist({ cardId, checklistId, update }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board);\n\n        // Find the card that contains the checklist that will be updated\n        const card = clonedBoard.cards.find((_card) => _card.id === cardId);\n\n        if (!card) {\n          reject(new Error('Card not found'));\n          return;\n        }\n\n        // Find the checklist that will be updated\n        const checklist = card.checklists.find((_checklist) => _checklist.id === checklistId);\n\n        if (!checklist) {\n          reject(new Error('Checklist not found'));\n          return;\n        }\n\n        // Update the checklist\n        Object.assign(checklist, update);\n\n        // Save changes\n        board = clonedBoard;\n\n        resolve(deepCopy(checklist));\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  deleteChecklist({ cardId, checklistId }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board);\n\n        // Find the card that contains the checklist that will be removed\n        const card = clonedBoard.cards.find((_card) => _card.id === cardId);\n\n        if (!card) {\n          reject(new Error('Card not found'));\n          return;\n        }\n\n        // Remove the checklist from the card\n        card.checklists = card.checklists.filter((checklists) => checklists.id !== checklistId);\n\n        // Save changes\n        board = clonedBoard;\n\n        resolve(true);\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  addCheckItem({ cardId, checklistId, name }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board);\n\n        // Find the card where the checklist will be added\n        const card = clonedBoard.cards.find((_card) => _card.id === cardId);\n\n        if (!card) {\n          reject(new Error('Card not found'));\n          return;\n        }\n\n        // Find the checklist where the check item will be added\n        const checklist = card.checklists.find((_checklist) => _checklist.id === checklistId);\n\n        if (!checklist) {\n          reject(new Error('Checklist not found'));\n          return;\n        }\n\n        // Create the new check item\n        const checkItem = {\n          id: createResourceId(),\n          checklistId,\n          name,\n          state: 'incomplete'\n        };\n\n        // Add the check item to the checklist\n        checklist.checkItems.push(checkItem);\n\n        // Save changes\n        board = clonedBoard;\n\n        resolve(deepCopy(checkItem));\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  updateCheckItem({ cardId, checklistId, checkItemId, update }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board);\n\n        // Find the card where the checklist will be added\n        const card = clonedBoard.cards.find((_card) => _card.id === cardId);\n\n        if (!card) {\n          reject(new Error('Card not found'));\n          return;\n        }\n\n        // Find the checklist where the check item will be updated\n        const checklist = card.checklists.find((_checklist) => _checklist.id === checklistId);\n\n        if (!checklist) {\n          reject(new Error('Checklist not found'));\n          return;\n        }\n\n        // Find the checklist where the check item will be updated\n        const checkItem = checklist.checkItems.find((_checkItem) => _checkItem.id === checkItemId);\n\n        if (!checkItem) {\n          reject(new Error('Check item not found'));\n          return;\n        }\n\n        // Update the check item\n        Object.assign(checkItem, update);\n\n        // Save changes\n        board = clonedBoard;\n\n        resolve(deepCopy(checkItem));\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n\n  deleteCheckItem({ cardId, checklistId, checkItemId }) {\n    return new Promise((resolve, reject) => {\n      try {\n        // Make a deep copy\n        const clonedBoard = deepCopy(board);\n\n        // Find the card that contains the checklist that contains the check item that will be removed\n        const card = clonedBoard.cards.find((_card) => _card.id === cardId);\n\n        if (!card) {\n          reject(new Error('Card not found'));\n          return;\n        }\n\n        // Find the checklist where the check item will be updated\n        const checklist = card.checklists.find((_checklist) => _checklist.id === checklistId);\n\n        if (!checklist) {\n          reject(new Error('Checklist not found'));\n          return;\n        }\n\n        // Remove the check item from the checklist\n        checklist.checkItems = checklist.checkItems.filter((checkItem) => (checkItem.id !== checkItemId));\n\n        // Save changes\n        board = clonedBoard;\n\n        resolve(true);\n      } catch (err) {\n        console.error('[Kanban Api]: ', err);\n        reject(new Error('Internal server error'));\n      }\n    });\n  }\n}\n\nexport const kanbanApi = new KanbanApi();\n"]},"metadata":{},"sourceType":"module"}