{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/environment/VarsityMediaLive07042021/src/components/WidgetPreviewer.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardHeader, Divider, IconButton, ThemeProvider } from '@material-ui/core';\nimport { THEMES } from '../constants';\nimport useSettings from '../hooks/useSettings';\nimport MoonIcon from '../icons/Moon';\nimport SunIcon from '../icons/Sun';\nimport { createCustomTheme } from '../theme';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WidgetPreviewer = props => {\n  _s();\n\n  const {\n    element,\n    name,\n    ...other\n  } = props;\n  const {\n    settings\n  } = useSettings();\n  const [selectedTheme, setSelectedTheme] = useState(settings.theme);\n  useEffect(() => {\n    setSelectedTheme(settings.theme);\n  }, [settings.theme]);\n\n  const handleSwitch = () => setSelectedTheme(prevSelectedTheme => {\n    if (prevSelectedTheme === THEMES.LIGHT) {\n      if (settings.theme === THEMES.LIGHT) {\n        return THEMES.DARK;\n      }\n\n      return settings.theme;\n    }\n\n    return THEMES.LIGHT;\n  });\n\n  const theme = createCustomTheme({ ...settings,\n    theme: selectedTheme\n  });\n  return /*#__PURE__*/_jsxDEV(Card, {\n    variant: \"outlined\",\n    sx: {\n      mb: 8\n    },\n    ...other,\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      action: /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: handleSwitch,\n        children: selectedTheme === 'LIGHT' ? /*#__PURE__*/_jsxDEV(MoonIcon, {\n          fontSize: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(SunIcon, {\n          fontSize: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this),\n      title: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: element\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WidgetPreviewer, \"lpaHKyS7SJQd1enwjEQ6JwcKOlk=\", false, function () {\n  return [useSettings];\n});\n\n_c = WidgetPreviewer;\nWidgetPreviewer.propTypes = {\n  element: PropTypes.node.isRequired,\n  name: PropTypes.string.isRequired\n};\nexport default WidgetPreviewer;\n\nvar _c;\n\n$RefreshReg$(_c, \"WidgetPreviewer\");","map":{"version":3,"sources":["/home/ec2-user/environment/VarsityMediaLive07042021/src/components/WidgetPreviewer.js"],"names":["useEffect","useState","PropTypes","Card","CardHeader","Divider","IconButton","ThemeProvider","THEMES","useSettings","MoonIcon","SunIcon","createCustomTheme","WidgetPreviewer","props","element","name","other","settings","selectedTheme","setSelectedTheme","theme","handleSwitch","prevSelectedTheme","LIGHT","DARK","mb","propTypes","node","isRequired","string"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,EAAeC,UAAf,EAA2BC,OAA3B,EAAoCC,UAApC,EAAgDC,aAAhD,QAAqE,mBAArE;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,SAASC,iBAAT,QAAkC,UAAlC;;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAAA;;AACjC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiB,OAAGC;AAApB,MAA8BH,KAApC;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAeT,WAAW,EAAhC;AACA,QAAM,CAACU,aAAD,EAAgBC,gBAAhB,IAAoCnB,QAAQ,CAACiB,QAAQ,CAACG,KAAV,CAAlD;AAEArB,EAAAA,SAAS,CAAC,MAAM;AACdoB,IAAAA,gBAAgB,CAACF,QAAQ,CAACG,KAAV,CAAhB;AACD,GAFQ,EAEN,CAACH,QAAQ,CAACG,KAAV,CAFM,CAAT;;AAIA,QAAMC,YAAY,GAAG,MAAMF,gBAAgB,CAAEG,iBAAD,IAAuB;AACjE,QAAIA,iBAAiB,KAAKf,MAAM,CAACgB,KAAjC,EAAwC;AACtC,UAAIN,QAAQ,CAACG,KAAT,KAAmBb,MAAM,CAACgB,KAA9B,EAAqC;AACnC,eAAOhB,MAAM,CAACiB,IAAd;AACD;;AAED,aAAOP,QAAQ,CAACG,KAAhB;AACD;;AAED,WAAOb,MAAM,CAACgB,KAAd;AACD,GAV0C,CAA3C;;AAYA,QAAMH,KAAK,GAAGT,iBAAiB,CAAC,EAC9B,GAAGM,QAD2B;AAE9BG,IAAAA,KAAK,EAAEF;AAFuB,GAAD,CAA/B;AAKA,sBACE,QAAC,IAAD;AACE,IAAA,OAAO,EAAC,UADV;AAEE,IAAA,EAAE,EAAE;AAAEO,MAAAA,EAAE,EAAE;AAAN,KAFN;AAAA,OAGMT,KAHN;AAAA,4BAKE,QAAC,UAAD;AACE,MAAA,MAAM,eACJ,QAAC,UAAD;AAAY,QAAA,OAAO,EAAEK,YAArB;AAAA,kBACGH,aAAa,KAAK,OAAlB,gBACG,QAAC,QAAD;AAAU,UAAA,QAAQ,EAAC;AAAnB;AAAA;AAAA;AAAA;AAAA,gBADH,gBAEG,QAAC,OAAD;AAAS,UAAA,QAAQ,EAAC;AAAlB;AAAA;AAAA;AAAA;AAAA;AAHN;AAAA;AAAA;AAAA;AAAA,cAFJ;AAQE,MAAA,KAAK,EAAEH;AART;AAAA;AAAA;AAAA;AAAA,YALF,eAeE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAfF,eAgBE,QAAC,aAAD;AAAe,MAAA,KAAK,EAAEK,KAAtB;AAAA,gBACGN;AADH;AAAA;AAAA;AAAA;AAAA,YAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CAhDD;;GAAMF,e;UAEiBJ,W;;;KAFjBI,e;AAkDNA,eAAe,CAACc,SAAhB,GAA4B;AAC1BZ,EAAAA,OAAO,EAAEb,SAAS,CAAC0B,IAAV,CAAeC,UADE;AAE1Bb,EAAAA,IAAI,EAAEd,SAAS,CAAC4B,MAAV,CAAiBD;AAFG,CAA5B;AAKA,eAAehB,eAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, CardHeader, Divider, IconButton, ThemeProvider } from '@material-ui/core';\nimport { THEMES } from '../constants';\nimport useSettings from '../hooks/useSettings';\nimport MoonIcon from '../icons/Moon';\nimport SunIcon from '../icons/Sun';\nimport { createCustomTheme } from '../theme';\n\nconst WidgetPreviewer = (props) => {\n  const { element, name, ...other } = props;\n  const { settings } = useSettings();\n  const [selectedTheme, setSelectedTheme] = useState(settings.theme);\n\n  useEffect(() => {\n    setSelectedTheme(settings.theme);\n  }, [settings.theme]);\n\n  const handleSwitch = () => setSelectedTheme((prevSelectedTheme) => {\n    if (prevSelectedTheme === THEMES.LIGHT) {\n      if (settings.theme === THEMES.LIGHT) {\n        return THEMES.DARK;\n      }\n\n      return settings.theme;\n    }\n\n    return THEMES.LIGHT;\n  });\n\n  const theme = createCustomTheme({\n    ...settings,\n    theme: selectedTheme\n  });\n\n  return (\n    <Card\n      variant=\"outlined\"\n      sx={{ mb: 8 }}\n      {...other}\n    >\n      <CardHeader\n        action={(\n          <IconButton onClick={handleSwitch}>\n            {selectedTheme === 'LIGHT'\n              ? <MoonIcon fontSize=\"small\" />\n              : <SunIcon fontSize=\"small\" />}\n          </IconButton>\n        )}\n        title={name}\n      />\n      <Divider />\n      <ThemeProvider theme={theme}>\n        {element}\n      </ThemeProvider>\n    </Card>\n  );\n};\n\nWidgetPreviewer.propTypes = {\n  element: PropTypes.node.isRequired,\n  name: PropTypes.string.isRequired\n};\n\nexport default WidgetPreviewer;\n"]},"metadata":{},"sourceType":"module"}